{"version":3,"file":"contrib/text_ckeditor4/static/djangocms_text/bundles/bundle.ckeditor4.min.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB;AAClB,eAAe;;AAEf;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA,qBAAqB;AACrB,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA,SAAS,QAAQ;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA,SAAS,QAAQ;AACjB;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA,SAAS,QAAQ;AACjB;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA,SAAS,QAAQ;AACjB;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA,SAAS,SAAS;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA,SAAS,QAAQ;AACjB;AACA;AACA,CAAC;;;;;;;;ACnMD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,iBAAiB,8BAA8B;AAC/C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,2DAA2D,IAAI;AAC/D;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,6CAA6C;AAC7C,kBAAkB;AAClB;AACA,uDAAuD;AACvD,6CAA6C;AAC7C,kBAAkB;AAClB,gDAAgD;AAChD,sDAAsD;AACtD,uCAAuC;AACvC,wCAAwC;AACxC,kBAAkB;AAClB,4CAA4C;AAC5C,uCAAuC;AACvC,kCAAkC;AAClC,wCAAwC;AACxC,wCAAwC;AACxC,kCAAkC;AAClC,uCAAuC;AACvC,gDAAgD;AAChD,kBAAkB;AAClB;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+CAA+C,MAAM;;AAErD;;AAEA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL,CAAC;;;;;;;UC7KD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;ACtBA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,mDAAmD,KAAK;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,GAAG,IAAI,cAAc;AAClE;AACA,wCAAwC,aAAa,UAAU,GAAG;AAClE,mCAAmC,0BAA0B,UAAU,aAAa;AACpF,6BAA6B,oBAAoB;AACjD,6BAA6B,oBAAoB,GAAG,oCAAoC;AACxF;AACA;AACA;AACA,6CAA6C,GAAG,IAAI,cAAc;AAClE;AACA,yCAAyC,GAAG,UAAU,aAAa,GAAG,qCAAqC,SAAS,oBAAoB;AACxI;AACA,8CAA8C,aAAa,GAAG,kDAAkD,GAAG,aAAa;AAChI,iBAAiB;AACjB;AACA;AACA;AACA,sDAAsD,GAAG,UAAU,aAAa,WAAW,oBAAoB;AAC/G;AACA;AACA;AACA;AACA;AACA,oCAAoC,YAAY,oBAAoB,cAAc;AAClF;AACA;AACA;AACA,6CAA6C,cAAc,YAAY,QAAQ;AAC/E;AACA;AACA,KAAK;AACL;AACA;;;AAGA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,2DAA2D,WAAW;AACtE;AACA;AACA;AACA;AACA,4DAA4D,gCAAgC;AAC5F;AACA;AACA;AACA;AACA;;;;;AAKmE;;;ACrb1B;;AAEzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,YAAY;AACrC;;AAEA;AACA;AACA,kCAAkC;AAClC,iBAAiB;;AAEjB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,YAAY,aAAa,YAAY;AAC5G;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;;AAEb;;AAEA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;;AAEA;AACA,6BAA6B;AAC7B;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;;AAEA,OAAO,SAAS;AAChB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,IAAI;AACJ,SAAS;;AAET;;AAEA;AACA;;AAEA;AACA;;AAEA,OAAO,SAAS;AAChB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA,IAAI;AACJ,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL,CAAC;;;;;;;AC/fD;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAG+C;AACD;AACA;;AAE9C;;;AAGA;;AAEA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,4CAA4C;;AAE5C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA","sources":["webpack://djangocms-text/./private/js/ckeditor4_plugins/cmsresize/plugin.js","webpack://djangocms-text/./private/js/ckeditor4_plugins/cmswidget/plugin.js","webpack://djangocms-text/webpack/bootstrap","webpack://djangocms-text/./private/js/cms.dialog.js","webpack://djangocms-text/./private/js/ckeditor4_plugins/cmsplugins/plugin.js","webpack://djangocms-text/./private/js/cms.ckeditor4.js"],"sourcesContent":["(function ($) {\nif (CKEDITOR && CKEDITOR.plugins && CKEDITOR.plugins.registered && CKEDITOR.plugins.registered.cmsresize) {\n\treturn;\n}\n/**\n+ * Modified version of the resize plugin to support touch events.\n+ *\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nCKEDITOR.plugins.add( 'cmsresize', {\n\tinit: function( editor ) {\n\t\tfunction dragHandler( evt ) {\n\t\t\tvar dx = evt.originalEvent.screenX - origin.x,\n\t\t\tdy = evt.originalEvent.screenY - origin.y,\n\t\t\twidth = startSize.width,\n\t\t\theight = startSize.height,\n\t\t\tinternalWidth = width + dx * ( resizeDir == 'rtl' ? -1 : 1 ),\n\t\t\tinternalHeight = height + dy;\n\n\t\t\tif ( resizeHorizontal )\n\t\t\t\twidth = Math.max( config.resize_minWidth, Math.min( internalWidth, config.resize_maxWidth ) );\n\n\t\t\tif ( resizeVertical )\n\t\t\t\theight = Math.max( config.resize_minHeight, Math.min( internalHeight, config.resize_maxHeight ) );\n\n\t\t\t// DO NOT impose fixed size with single direction resize. (https://dev.ckeditor.com/ticket/6308)\n\t\t\teditor.resize( resizeHorizontal ? width : null, height );\n\t\t}\n\n\t\tfunction dragEndHandler() {\n\t\t\tCMS.$(CKEDITOR.document.$).off( 'pointermove', dragHandler );\n\t\t\tCMS.$(CKEDITOR.document.$).off( 'pointerup', dragEndHandler );\n\n\t\t\tif ( editor.document ) {\n\t\t\t\tCMS.$(editor.document.$).off( 'pointermove', dragHandler );\n\t\t\t\tCMS.$(editor.document.$).off( 'pointerup', dragEndHandler );\n\t\t\t}\n\t\t}\n\n\t\tvar config = editor.config;\n\t\tvar spaceId = editor.ui.spaceId( 'resizer' );\n\n\t\t// Resize in the same direction of chrome,\n\t\t// which is identical to dir of editor element. (https://dev.ckeditor.com/ticket/6614)\n\t\tvar resizeDir = editor.element ? editor.element.getDirection( 1 ) : 'ltr';\n\n\t\t!config.resize_dir && ( config.resize_dir = 'vertical' );\n\t\t( config.resize_maxWidth === undefined ) && ( config.resize_maxWidth = 3000 );\n\t\t( config.resize_maxHeight === undefined ) && ( config.resize_maxHeight = 3000 );\n\t\t( config.resize_minWidth === undefined ) && ( config.resize_minWidth = 750 );\n\t\t( config.resize_minHeight === undefined ) && ( config.resize_minHeight = 250 );\n\n\t\tif ( config.resize_enabled !== false ) {\n\t\t\tvar container = null,\n\t\t\t\torigin, startSize,\n\t\t\t\tresizeHorizontal = ( config.resize_dir == 'both' || config.resize_dir == 'horizontal' ) && ( config.resize_minWidth != config.resize_maxWidth ),\n\t\t\t\tresizeVertical = ( config.resize_dir == 'both' || config.resize_dir == 'vertical' ) && ( config.resize_minHeight != config.resize_maxHeight );\n\n\t\t\tvar mouseDownFn = CKEDITOR.tools.addFunction( function( $event ) {\n\t\t\t\tif ( !container )\n\t\t\t\t\tcontainer = editor.getResizable();\n\n\t\t\t\tstartSize = { width: container.$.offsetWidth || 0, height: container.$.offsetHeight || 0 };\n\t\t\t\torigin = { x: $event.screenX, y: $event.screenY };\n\n\t\t\t\tconfig.resize_minWidth > startSize.width && ( config.resize_minWidth = startSize.width );\n\t\t\t\tconfig.resize_minHeight > startSize.height && ( config.resize_minHeight = startSize.height );\n\n\t\t\t\tCMS.$(CKEDITOR.document.$).on( 'pointermove', dragHandler );\n\t\t\t\tCMS.$(CKEDITOR.document.$).on( 'pointerup', dragEndHandler );\n\n\t\t\t\tif ( editor.document ) {\n\t\t\t\t\tCMS.$(editor.document.$).on( 'pointermove', dragHandler );\n\t\t\t\t\tCMS.$(editor.document.$).on( 'pointerup', dragEndHandler );\n\t\t\t\t}\n\n\t\t\t\t$event.preventDefault && $event.preventDefault();\n\t\t\t} );\n\n\t\t\tCMS.$(CKEDITOR.document.$).find('html').attr('data-touch-action', 'none');\n\n\t\t\teditor.on( 'destroy', function() {\n\t\t\t\tCKEDITOR.tools.removeFunction( mouseDownFn );\n\t\t\t} );\n\n\t\t\teditor.on( 'uiSpace', function( event ) {\n\t\t\t\tif ( event.data.space == 'bottom' ) {\n\t\t\t\t\tvar direction = '';\n\t\t\t\t\tif ( resizeHorizontal && !resizeVertical )\n\t\t\t\t\t\tdirection = ' cke_resizer_horizontal';\n\t\t\t\t\tif ( !resizeHorizontal && resizeVertical )\n\t\t\t\t\t\tdirection = ' cke_resizer_vertical';\n\n\t\t\t\t\tvar resizerHtml =\n\t\t\t\t\t\t'<span' +\n\t\t\t\t\t\t' id=\"' + spaceId + '\"' +\n\t\t\t\t\t\t' class=\"cms-ckeditor-resizer cke_resizer' + direction + ' cke_resizer_' + resizeDir + '\"' +\n\t\t\t\t\t\t' title=\"' + CKEDITOR.tools.htmlEncode( editor.lang.common.resize ) + '\"' +\n\t\t\t\t\t\t' onmousedown=\"CKEDITOR.tools.callFunction(' + mouseDownFn + ', event)\"' +\n\t\t\t\t\t\t'>' +\n\t\t\t\t\t\t// BLACK LOWER RIGHT TRIANGLE (ltr)\n\t\t\t\t\t\t// BLACK LOWER LEFT TRIANGLE (rtl)\n\t\t\t\t\t\t( resizeDir == 'ltr' ? '\\u25E2' : '\\u25E3' ) +\n\t\t\t\t\t\t'</span>';\n\n\t\t\t\t\t// Always sticks the corner of botttom space.\n\t\t\t\t\tresizeDir == 'ltr' && direction == 'ltr' ? event.data.html += resizerHtml : event.data.html = resizerHtml + event.data.html;\n\t\t\t\t}\n\t\t\t}, editor, null, 100 );\n\n\t\t\t// Toggle the visibility of the resizer when an editor is being maximized or minimized.\n\t\t\teditor.on( 'maximize', function( event ) {\n\t\t\t\teditor.ui.space( 'resizer' )[ event.data == CKEDITOR.TRISTATE_ON ? 'hide' : 'show' ]();\n\t\t\t} );\n\t\t}\n\t}\n} );\n\n/**\n * The minimum editor width, in pixels, when resizing the editor interface by using the resize handle.\n * Note: It falls back to editor's actual width if it is smaller than the default value.\n *\n * Read more in the {@glink features/resize documentation}\n * and see the {@glink examples/resize example}.\n *\n *\t\tconfig.resize_minWidth = 500;\n *\n * @cfg {Number} [resize_minWidth=750]\n * @member CKEDITOR.config\n */\n\n/**\n * The minimum editor height, in pixels, when resizing the editor interface by using the resize handle.\n * Note: It falls back to editor's actual height if it is smaller than the default value.\n *\n * Read more in the {@glink features/resize documentation}\n * and see the {@glink examples/resize example}.\n *\n *\t\tconfig.resize_minHeight = 600;\n *\n * @cfg {Number} [resize_minHeight=250]\n * @member CKEDITOR.config\n */\n\n/**\n * The maximum editor width, in pixels, when resizing the editor interface by using the resize handle.\n *\n * Read more in the {@glink features/resize documentation}\n * and see the {@glink examples/resize example}.\n *\n *\t\tconfig.resize_maxWidth = 750;\n *\n * @cfg {Number} [resize_maxWidth=3000]\n * @member CKEDITOR.config\n */\n\n/**\n * The maximum editor height, in pixels, when resizing the editor interface by using the resize handle.\n *\n * Read more in the {@glink features/resize documentation}\n * and see the {@glink examples/resize example}.\n *\n *\t\tconfig.resize_maxHeight = 600;\n *\n * @cfg {Number} [resize_maxHeight=3000]\n * @member CKEDITOR.config\n */\n\n/**\n * Whether to enable the resizing feature. If this feature is disabled, the resize handle will not be visible.\n *\n * Read more in the {@glink features/resize documentation}\n * and see the {@glink examples/resize example}.\n *\n *\t\tconfig.resize_enabled = false;\n *\n * @cfg {Boolean} [resize_enabled=true]\n * @member CKEDITOR.config\n */\n\n/**\n * The dimensions for which the editor resizing is enabled. Possible values\n * are `both`, `vertical`, and `horizontal`.\n *\n * Read more in the {@glink features/resize documentation}\n * and see the {@glink examples/resize example}.\n *\n *\t\tconfig.resize_dir = 'both';\n *\n * @since 3.3.0\n * @cfg {String} [resize_dir='vertical']\n * @member CKEDITOR.config\n */\n})(CMS.$);\n","(function ($) {\n    if (CKEDITOR && CKEDITOR.plugins && CKEDITOR.plugins.registered && CKEDITOR.plugins.registered.cmswidget) {\n        return;\n    }\n\n    /**\n     * Returns the focused widget, if of the type specific for this plugin.\n     * If no widget is focused, `null` is returned.\n     *\n     * @param {CKEDITOR.editor} editor\n     * @returns {CKEDITOR.plugins.widget|null} widget\n     */\n    function getSelectedWidget(editor) {\n        var widget = editor.widgets.focused;\n\n        if (widget && widget.name === 'cmswidget') {\n            return widget;\n        }\n\n        widget = editor.widgets.selected;\n\n        if (widget && widget.length) {\n            var index = widget.findIndex(function (w) {\n                return w.name === 'cmswidget';\n            });\n\n            if (index !== -1) {\n                return widget[index];\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Block / inline-but-block widgets can't be aligned properly\n     * because CKEDITOR unwraps them and widget markup is then injected incorrectly\n     * into resulting markup. This is not the complete solution, but this is what we have.\n     *\n     * @param {CKEDITOR.plugins.widget} widget widget\n     * @returns {Boolean}\n     */\n    function canWidgetBeAligned(widget) {\n        if (widget.inline) {\n            if (CMS.$(widget.wrapper.$).hasClass('cke_widget_wrapper_force_block')) {\n                return false;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    var alignCommandIntegrator = function (editor) {\n        var execCallbacks = [];\n\n        return function (value) {\n            var command = editor.getCommand('justify' + value);\n\n            if (!command) {\n                return;\n            }\n\n            execCallbacks.push(function () {\n                command.refresh(editor, editor.elementPath());\n            });\n\n            command.on('exec', function (e) {\n                var widget = getSelectedWidget(editor);\n\n                if (widget) {\n                    var enabled = canWidgetBeAligned(widget);\n\n                    if (!enabled) {\n                        // Once the widget changed its align, all the align commands\n                        // must be refreshed: the event is to be cancelled.\n                        for (var i = execCallbacks.length; i--;) {\n                            execCallbacks[i]();\n                        }\n\n                        e.cancel();\n                    }\n                }\n            });\n\n            command.on('refresh', function (e) {\n                var widget = getSelectedWidget(editor);\n\n                if (!widget) {\n                    return;\n                }\n\n                var enabled = canWidgetBeAligned(widget);\n\n                // Don't allow justify commands when widget alignment is disabled\n                if (!enabled) {\n                    this.setState(CKEDITOR.TRISTATE_DISABLED);\n                    e.cancel();\n                }\n            });\n        };\n    };\n\n    CKEDITOR.plugins.add('cmswidget', {\n        requires: 'widget',\n        onLoad: function () {\n            CKEDITOR.addCss(\n                // when widget contents are inline,\n                // but have block-level css\n                '.cke_widget_wrapper_force_block{' +\n                    'display:block!important;' +\n                '}' +\n                // empty elements focus outline\n                '.cke_widget_block>.cke_widget_element{' +\n                    'display:block!important;' +\n                '}' +\n                'span.cms-ckeditor-plugin-label{' +\n                    'display: inline-block !important;' +\n                    'padding-left: 8px;' +\n                    'padding-right: 8px;' +\n                '}' +\n                '.cms-ckeditor-plugin-label{' +\n                    'background: black;' +\n                    'color: white;' +\n                    'text-align: center;' +\n                    'border-radius: 3px;' +\n                    'height: 24px;' +\n                    'line-height: 24px;' +\n                    'font-size: 14px !important;' +\n                '}'\n            );\n        },\n\n        init: function (editor) {\n            this.addWidgetDefinition(editor);\n        },\n\n        afterInit: function (editor) {\n            // Integrate with align commands (justify plugin).\n            var integrate = alignCommandIntegrator(editor);\n\n            ['left', 'right', 'center', 'block'].forEach(integrate);\n        },\n\n        addWidgetDefinition: function (editor) {\n            editor.widgets.add('cmswidget', {\n                button: 'CMS Plugin',\n\n                template:\n                    '<cms-plugin style=\"unset: all\">' +\n                    '</cms-plugin>',\n\n                allowedContent: 'cms-plugin',\n                disallowedContent: 'cms-plugin{float}',\n\n                requiredContent: 'cms-plugin',\n\n                upcast: function (element) {\n                    return element.name === 'cms-plugin';\n                },\n\n                init: function () {\n                    var contents = $(this.element.$).children();\n                    var displayProp = contents.css('display') || '';\n\n                    if (!displayProp.includes('inline')) {\n                        this.wrapper.addClass('cke_widget_wrapper_force_block');\n                    }\n                }\n            });\n        }\n    });\n})(CMS.$);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/* eslint-env es6 */\n/* jshint esversion: 6 */\n/* global document, window, console */\n\n\nclass CmsDialog {\n    /**\n     * Constructor for creating an instance of the class showing a django CMS modal in a\n     * modal HTML dialog element to show a plugin admin form in an iframe.\n     *\n     * The django CMS modal is resizable (thanks to CSS) and movable. It cannot be\n     * minimized or maximized. It blocks all other input on the page until it is closed.\n     *\n     * The dialog element is attached to the <div id=\"cms-top\"> at the beginning of a page\n     * with a toolbar. The dialog is removed when it is closed.\n     *\n     * @param {Element} el - The editor element to be associated with the instance.\n     * @param {Function} saveSuccess - The success callback function to be invoked upon save.\n     * @param {Function} cancel - The callback function to be invoked upon cancellation.\n     */\n    constructor(el, saveSuccess, cancel) {\n        this.el = el;\n        this.saveSuccess = saveSuccess;\n        this.cancel = cancel;\n        this.close = this._close.bind(this);\n    }\n\n    /**\n     * Create a plugin modal dialog.\n     * @return {HTMLIFrameElement} - The newly created iframe element.\n     */\n    pluginDialog() {\n        this.dialog = document.createElement(\"dialog\");\n        this.dialog.classList.add(\"cms-dialog\");\n        this.dialog.dataset.editor = this.el.id;\n        this.dialog.innerHTML = `\n            <div class=\"cms-modal-head\">\n                <span class=\"cms-modal-title\">\n                    <span class=\"cms-modal-title-prefix\"></span>\n                    <span class=\"cms-modal-title-suffix\"></span>\n                    <span class=\"cms-modal-close cms-icon cms-icon-close\"></span>\n                </span>\n            </div>\n            <div class=\"cms-modal-body\">\n            </div>\n            <div class=\"cms-modal-foot\">\n                <div class=\"cms-modal-buttons\">\n                <div class=\"cms-modal-buttons-inner\">\n                    <div class=\"cms-modal-item-buttons\"><a href=\"#\" class=\"cms-btn cms-btn-action default\">Save</a></div>\n                    <div class=\"cms-modal-item-buttons\"><a href=\"#\" class=\"cms-btn cms-btn-close-action\">Cancel</a></div>\n                </div>\n            </div>\n        `;\n\n        (window.parent || window).document.querySelector('div.cms').prepend(this.dialog);\n        const settings = window.CMS_Editor.getSettings(this.el);\n        this.dialog.querySelector(\".cms-modal-title-suffix\").textContent = settings.lang.edit;\n        this.dialog.querySelector(\".cms-modal-title-prefix\").textContent = settings.lang.toolbar;\n        this.dialog.querySelector('.cms-modal-title').addEventListener('mousedown', (event) => {\n            this.dragDialog(event);\n        });\n        this.dialog.querySelector('.cms-modal-title').addEventListener('touchstart', (event) => {\n            this.swipeDialog(event);\n        });\n        const closeEvent = (event) => {\n            event.stopPropagation();\n            event.preventDefault();\n            this.close();\n            if (this.cancel) {\n                this.cancel(event);\n            }\n        };\n        this.dialog.addEventListener(\"close\", (event) => closeEvent(event));\n        this.dialog\n            .querySelector(\".cms-btn-close-action\")\n            .addEventListener('click', (event) => closeEvent(event));\n        this.dialog\n            .querySelector(\".cms-modal-close\")\n            .addEventListener('click', (event) => closeEvent(event));\n        this.dialog.addEventListener('keydown', (event) => {\n            if (event.key === 'Escape') {\n                // Don't propagate the event to the CMS modal, or it will close, too\n                event.stopPropagation();\n            }\n        });\n        const iframe = document.createElement('iframe');\n        this.dialog.querySelector(\".cms-modal-body\").append(iframe);\n        return iframe;\n    }\n\n    /**\n     * Opens the edit dialog for a specific plugin.\n     *\n     * @param {string} pluginId - The ID of the plugin to be edited.\n     *\n     * @return {void}\n     */\n    editDialog(pluginId) {\n        const iframe = this.pluginDialog();\n\n        window.CMS_Editor.editPluginForm(pluginId, iframe, this.el,\n            (el, content, heading, submitrow) => this._dialogLoaded(el, content, heading, submitrow),\n            (el, content, data) => this._dialogSaved(el, content, data));\n    }\n\n    /**\n     * Dialog to add a plugin.\n     *\n     * @param {string} pluginType - The type of the plugin.\n     * @param {string} selectionText - The selected text (will be copied into the input field with\n     *                                 the class \"js-prepopulate-selected-text\").\n     *\n     * @return {void}\n     */\n    addDialog(pluginType, selectionText) {\n        const iframe = this.pluginDialog();\n\n        window.CMS_Editor.addPluginForm(pluginType, iframe, this.el,\n            (el, content, heading, submitrow) =>\n                this._dialogLoaded(el, content, heading, submitrow, selectionText),\n            (el, content, data) => this._dialogSaved(el, content, data));\n    }\n\n    _dialogLoaded(el, content, heading, submitrow, selectionText) {\n        if (submitrow) {\n            this.dialog.querySelector('.cms-btn-action.default')\n                .addEventListener('click', (event) => {\n                    event.stopPropagation();\n                    event.preventDefault();\n                    submitrow.closest('form').submit();\n                });\n        } else {\n            this.dialog.querySelector('.cms-btn-action.default').style.display = 'none';\n        }\n        if (heading) {\n            this.dialog.querySelector(\".cms-modal-title-suffix\").textContent = heading.textContent;\n        }\n        this.open();\n        // If form is big (i.e., scrollbars appear), make the dialog bigger\n        if (content.documentElement.scrollHeight > content.documentElement.clientHeight) {\n            this.dialog.style.height = \"60%\";\n            this.dialog.style.width = \"80%\";\n            content.documentElement.scrollTop = 0;\n        }\n\n        // Prefill marked input fields with selected text\n        selectionText = selectionText || '';\n        if (selectionText.length > 0) {\n            let fillInput = content.querySelector('.js-ckeditor-use-selected-text,.js-prepopulate-selected-text') ||\n                content.querySelector('#id_name');\n            if (fillInput) {  // Does such a field exist?\n                if (!(fillInput.value.trim())) {\n                    fillInput.value = selectionText;  // Prefill the field only if it is empty\n                    fillInput.focus();\n                }\n            }\n        }\n    }\n\n    _dialogSaved(el, content, data) {\n        this.saveSuccess(data);\n        this.close();\n    }\n\n    /**\n     * Opens the dialog by showing it in a modal state.\n     *\n     * @return {void}\n     */\n    open() {\n        this.dialog.showModal();\n    }\n\n    /**\n     * Removes the dialog\n     *\n     * @method close\n     * @memberof ClassName\n     * @returns {void}\n     */\n    _close() {\n        this.dialog.removeEventListener(\"close\", this.close);\n        this.dialog.remove();\n    }\n\n    /**\n     * Allows dragging the dialog based on the user's mouse movements.\n     *\n     * @param {Event} event - The mouse event that triggers the drag.\n     */\n    dragDialog(event) {\n        if (event.which !== 1) {\n            return;\n        }\n        event.preventDefault();\n        const firstX = event.pageX;\n        const firstY = event.pageY;\n        const initialX = parseInt(getComputedStyle(this.dialog).left);\n        const initialY = parseInt(getComputedStyle(this.dialog).top);\n\n        const dragIt = (e) => {\n            this.dialog.style.left = initialX + e.pageX - firstX + 'px';\n            this.dialog.style.top = initialY + e.pageY - firstY + 'px';\n        };\n        const Window = window.parent || window;\n        Window.addEventListener('mousemove', dragIt, false);\n        Window.addEventListener('mouseup', (e) => {\n            Window.removeEventListener('mousemove', dragIt, false);\n        }, false);\n    }\n\n    /**\n     * Allows dragging the dialog based on the user's touch movements.\n     *\n     * @param {Event} event - The touch event that triggers the drag.\n     */\n    swipeDialog(event) {\n        event.preventDefault();\n\n        const firstX = event.pageX;\n        const firstY = event.pageY;\n        const initialX = parseInt(getComputedStyle(this.dialog).left);\n        const initialY = parseInt(getComputedStyle(this.dialog).top);\n\n        const swipeIt = (e) => {\n            const contact = e.touches;\n            this.dialog.style.left = initialX + contact[0].pageX - firstX + 'px';\n            this.dialog.style.top = initialY + contact[0].pageY - firstY + 'px';\n        };\n\n        const Window = window.parent || window;\n        Window.addEventListener('touchmove', swipeIt, false);\n        Window.addEventListener('touchend', (e) => {\n            Window.removeEventListener('touchmove', swipeIt, false);\n        }, false);\n    }\n}\n\n\n/**\n * Represents an editor form, e.g. to enter a link address, or a pop-up toolbar.\n *\n * The form is contained in a (non-modal) dialog element which is attached to the editor's div wrapper.\n *\n *\n * @constructor\n * @param {*} el - The element to attach the form to.\n * @param {function} saveSuccess - The callback function to be called when form is successfully submitted.\n * @param {function} cancel - The callback function to be called when form is cancelled.\n */\nclass CmsForm {\n     constructor(el, saveSuccess, cancel) {\n        this.el = el;\n        this.saveSuccess = saveSuccess;\n        this.cancel = cancel;\n        this.close = this._close.bind(this);\n    }\n\n    formDialog(form, options) {\n        this.dialog = document.createElement(\"dialog\");\n        this.dialog.classList.add(\"cms-form-dialog\");\n        if (options.toolbar) {\n            this.dialog.innerHTML = form;\n        } else {\n            this.dialog.innerHTML = `\n                <form class=\"cms-form\">\n                    <div class=\"cms-form-inputs\">${form}</div>\n                    <div class=\"cms-form-buttons\">\n                        <span class=\"submit\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-check-lg\" viewBox=\"0 0 16 16\">\n                            <path d=\"M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425z\"/>\n                            </svg></span>\n                        <span class=\"cancel\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-x-lg\" viewBox=\"0 0 16 16\">\n                            <path d=\"M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z\"/>\n                            </svg></span>\n                    </div>\n                </form>`;\n        }\n\n        if (options && options.x && options.y) {\n            const el_pos = this.el.getBoundingClientRect();\n            if (options.x > window.innerWidth / 2) {\n                this.dialog.classList.add(\"right\");\n                this.dialog.style.right = (el_pos.x + el_pos.width - options.x - 24 - 10) + 'px';\n            } else {\n                this.dialog.style.left = (options.x - el_pos.x - 24) + 'px';\n            }\n            this.dialog.style.top = (options.y - el_pos.y + 5) + 'px';\n            this.dialog.style.transform = 'none';\n        }\n\n        // Add the dialog to the inline editor\n        this.el.prepend(this.dialog);\n        this.dialog.addEventListener(\"close\", (event) => {\n            event.stopPropagation();\n            this.close();\n        });\n        document.addEventListener(\"click\", this.close);\n        if (this.dialog.querySelector('.cancel')) {\n            this.dialog.querySelector(\".cancel\")\n                .addEventListener('click',  () => this.close() );\n        }\n        this.dialog.addEventListener('keydown', (event) => {\n            if (event.key === 'Escape') {\n                // Don't propagate the event to the CMS modal, or it will close, too\n                event.stopPropagation();\n                event.preventDefault();\n                this.close();\n            }\n        });\n        const formElement = this.dialog.querySelector('form');\n        if (formElement) {\n            formElement.addEventListener('submit', (event) => {\n                event.preventDefault();\n                this.submit();\n            });\n            this.dialog.querySelector(\".submit\").addEventListener('click', (event) => {\n                event.preventDefault();\n                if (this.dialog.querySelector('form').reportValidity()) {\n                    this.submit();\n                }\n            });\n        }\n        return formElement || this.dialog;\n    }\n\n    open() {\n        this.dialog.show();\n        const firstInput = this.dialog.querySelector('input');\n        if (firstInput) {\n            firstInput.focus();\n        }\n    }\n\n    _close(event) {\n        if (!event || !this.dialog.contains(event.target)) {\n            // Do only close if the click is outside the dialog\n            document.removeEventListener(\"click\", this.close);\n            this.dialog.removeEventListener(\"close\", this.close);\n            if (this.cancel) {\n                this.cancel(event);\n            }\n            this.dialog.remove();\n        }\n    }\n\n    submit() {\n        const data = new FormData(this.dialog.querySelector('form'));\n        this.dialog.remove();\n        this.saveSuccess(data);\n    }\n}\n\n\n/**\n * Converts a given form array to HTML representation.\n *\n * @param {Array} formArray - The array containing form elements.\n * @returns {string} - The HTML form representation.\n */\nfunction formToHtml(formArray) {\n    'use strict';\n    let form = '';\n\n    formArray.forEach((element) => {\n        const id = Math.random().toString(36).slice(2, 9);\n        switch(element.type) {\n            case 'text':\n            case 'url':\n                if (element.label) {\n                    form += `<label for=\"id${id}\">${element.label}</label>`;\n                }\n                form += `<input type=\"${element.type}\" id=\"id${id}\"\n                    placeholder=\"${element.placeholder || ''}\" name=\"${element.name}\"\n                    class=\"${element.class || ''}\"\n                    value=\"${element.value || ''}\"${element.required ? ' required' : ''}>`;\n                break;\n            case 'select':\n                if (element.label) {\n                    form += `<label for=\"id${id}\">${element.label}</label>`;\n                }\n                form += `<select id=\"id${id}\" name=\"${element.name}\"${element.required ? ' required' : ''} class=\"${element.class || ''}\">`;\n                element.options.forEach((option) => {\n                    form += `<option value=\"${option.value}\"${option.value === element.value ? ' selected' : ''}>${option.label}</option>`;\n                });\n                form += '</select>';\n                break;\n            case 'hidden':\n                form += `<input type=\"hidden\" id=\"id${id}\" name=\"${element.name}\" value=\"${element.value || ''}\">`;\n                break;\n            case 'hr':\n                form += '<hr>';\n                break;\n            case 'link':\n                form += `<a href=\"${element.url}\" target=\"_blank\">${element.label}</a>`;\n                break;\n            case 'section':\n                const content = formToHtml(element.content);\n                form += `<details><summary>${element.label}</summary>${content}</details>`;\n                break;\n        }\n    });\n    return form + '<input type=\"submit\" hidden />';\n}\n\n\n/**\n * Populates a given HTML form with values from a form object.\n *\n * @param {HTMLFormElement} htmlForm - The HTML form element to populate.\n * @param {object} attributes - The attributes to populate the form with.\n * @param {Array} formObject - The form object containing input values.\n */\nfunction populateForm(htmlForm,  attributes, formObject) {\n    'use strict';\n    if (attributes && formObject) {\n        for (const input of formObject) {\n            let value;\n            if (input.name in attributes) {\n                value = attributes[input.name] || '';\n            } else {\n                value = input.value || '';\n            }\n            const field = htmlForm.querySelector(`[name=\"${input.name}\"]`);\n            if (field && field.value !== value) {\n                field.value = value;\n                if (field.getAttribute('type') === 'hidden') {\n                    // Trigger change event for hidden fields\n                    field.dispatchEvent(new Event('input', {bubbles: true, cancelable: true}));\n                }\n            }\n        }\n    }\n}\n\n\n\n\nexport { formToHtml, populateForm, CmsForm, CmsDialog as default };\n","import CmsDialog from \"../../cms.dialog\";\n\n(function ($) {\n    if (CKEDITOR && CKEDITOR.plugins && CKEDITOR.plugins.registered && CKEDITOR.plugins.registered.CMSPlugins) {\n        return;\n    }\n\n    /**\n     * Determine if we should return `div` or `span` based on the\n     * plugin markup.\n     *\n     * @function getFakePluginElement\n     * @private\n     * @param {String} pluginMarkup valid html hopefully\n     * @returns {String} div|span\n     */\n    function getFakePluginElement(pluginMarkup) {\n        var innerTags = (pluginMarkup.match(/<\\s*([^>\\s]+)[\\s\\S]*?>/) || [0, false]).splice(1);\n\n        var containsAnyBlockLikeElements = innerTags.some(function (tag) {\n            return tag && CKEDITOR.dtd.$block[tag];\n        });\n\n        var fakeRealType = 'span';\n\n        if (containsAnyBlockLikeElements) {\n            fakeRealType = 'div';\n        }\n\n        return fakeRealType;\n    }\n\n    /**\n     * @function replaceTagName\n     * @private\n     * @param {jQuery} elements\n     * @param {String} tagName\n     */\n    function replaceTagName(elements, tagName) {\n        elements.each(function (i, el) {\n            var newElement;\n\n            var element = $(el);\n\n            newElement = $('<' + tagName + '>');\n\n            // attributes\n            $.each(el.attributes, function (index, attribute) {\n                newElement.attr(attribute.nodeName, attribute.nodeValue);\n            });\n\n            // content\n            newElement.html(element.html());\n\n            element.replaceWith(newElement);\n        });\n    }\n\n    CKEDITOR.plugins.add('CMSPlugins', {\n\n        // Register the icons. They must match command names.\n        icons: 'CMSPlugins',\n\n        // The plugin initialization logic goes inside this method.\n        init: function (editor) {\n            var that = this;\n\n\t\t\tCKEDITOR.on('instanceReady', function () {\n                var widgetInstances = [];\n\n                for (var key in editor.widgets.instances) {\n                    if (editor.widgets.instances.hasOwnProperty(key)) {\n                        widgetInstances.push(editor.widgets.instances[key]);\n                    }\n                }\n\n                that.numberOfChildren = CKEDITOR.tools.array.filter(widgetInstances, function (i) {\n                    return i.name === 'cms-widget';\n                }).length;\n            });\n            /**\n             * populated with _fresh_ child plugins\n             */\n            this.unsaved_child_plugins = [];\n\n\t\t\tvar settings  = CMS_Editor.getSettings(editor.name);\n\t\t\tthis.setupCancelCleanupCallback(settings);\n\n            // don't do anything if there are no plugins defined\n            if (settings === undefined || settings.plugins === undefined) {\n                return false;\n            }\n\n            this.setupDialog(editor);\n\n            // add the button\n            editor.ui.add('CMSPlugins', CKEDITOR.UI_PANELBUTTON, {\n                toolbar: 'cms,0',\n                label: settings.lang.CMSPlugins.title,\n                title: settings.lang.CMSPlugins.title,\n                className: 'cke_panelbutton__cmsplugins',\n                modes: { wysiwyg: 1 },\n                editorFocus: 0,\n\n                panel: {\n                    css: [CKEDITOR.skin.getPath('editor')].concat(editor.config.contentsCss),\n                    attributes: { 'role': 'cmsplugins', 'aria-label': settings.lang.CMSPlugins.aria }\n                },\n\n                // this is called when creating the dropdown list\n                onBlock: function (panel, block) {\n                    block.element.setHtml(that.setupDropdown(editor));\n\n                    var anchors = $(block.element.$).find('.cke_panel_listItem a');\n\n                    anchors.bind('click', function (e) {\n                        e.preventDefault();\n\n                        that.addPlugin($(this), panel, editor);\n                    });\n                }\n            });\n\n            // handle edit event via context menu\n            if (editor.contextMenu) {\n                this.setupContextMenu(editor);\n            }\n\n            editor.addCommand('cmspluginsEdit', {\n                exec: function () {\n                    var element = that.getElementFromSelection(editor);\n                    var plugin = that.getPluginWidget(element);\n                    if (plugin) {\n                        that.editPlugin(plugin, editor);\n                    }\n                }\n            });\n\n            // handle edit event on double click\n            // if event is a jQuery event (touchend), then we mutate\n            // event a bit so we make the payload similar to what ckeditor.event produces\n            var handleEdit = function (event) {\n                event.stop();\n\n                if (event.type === 'touchend' || event.type === 'click') {\n                    var cmsPluginNode = $(event.currentTarget).closest('cms-plugin')[0];\n\t\t\t\t\tvar element;\n\n                    // pick cke_widget span\n                    // eslint-disable-next-line new-cap\n                    element = new CKEDITOR.dom.element(cmsPluginNode).getParent();\n\n                    event.data = event.data || {};\n                    // have to fake selection to be able to replace markup after editing\n                    editor.getSelection().fake(element);\n                }\n\n                editor.execCommand('cmspluginsEdit');\n            };\n\n            editor.on('doubleclick', handleEdit);\n\n            editor.on('instanceReady', function () {\n/*\n\t\t\t\tvar context = CMS.$('iframe.cke_wysiwyg_frame');\n\t\t\t\tif (context.length > 0) {\n\t\t\t\t\tcontext = context.contentWindow.document.documentElement;\n\t\t\t\t} else {\n\t\t\t\t\tcontext = null;\n\t\t\t\t}\n                CMS.$('cms-plugin', CMS.$('iframe.cke_wysiwyg_frame')[0]\n                    .contentWindow.document.documentElement).on('click touchend', handleEdit);\n*/\n            });\n\n            this.setupDataProcessor(editor);\n        },\n\n        getElementFromSelection: function (editor) {\n            var selection = editor.getSelection();\n            var element = selection.getSelectedElement() ||\n                selection.getCommonAncestor().getAscendant('cms-plugin', true);\n\n            return element;\n        },\n\n        getPluginWidget: function (element) {\n            if (!element) {\n                return null;\n            }\n            return element.getAscendant('cms-plugin', true) || element.findOne('cms-plugin');\n        },\n\n        setupDialog: function (editor) {\n            var that = this;\n            var definition = function () {\n                return {\n                    title: '',\n                    minWidth: 200,\n                    minHeight: 200,\n                    contents: [{\n                        elements: [\n                            {\n                                type: 'html',\n                                html: '<iframe style=\"position:static; width:100%; height:100%; border:none;\" />'\n                            }\n                        ]\n                    }],\n                    onOk: function (dialog) {\n                        var iframe = $(CKEDITOR.dialog.getCurrent().parts.contents.$).find('iframe').contents();\n                        var iframeUrl = iframe[0].URL;\n\n                        iframe.find('form').submit();\n\n                        // catch the reload event and reattach\n                        var onSave = CMS.API.Helpers.onPluginSave;\n\n                        CMS.API.Helpers.onPluginSave = function () {\n                            CKEDITOR.dialog.getCurrent().hide();\n                            var data = CMS.API.Helpers.dataBridge;\n                            var addedChildPlugin = false;\n\t\t\t\t\t\t\tvar settings = CMS_Editor.getSettings(editor.name);\n\n                            if (iframeUrl.match(/add-plugin/)) {\n                                addedChildPlugin = true;\n                            }\n                            // in case it's a fresh text plugin children don't have to be\n                            // deleted separately\n                            if (!settings.delete_on_cancel && addedChildPlugin) {\n                                that.unsaved_child_plugins.push(data.plugin_id);\n                            }\n                            that.insertPlugin(data, dialog.sender._.editor);\n\t\t\t\t\t\t\tthat.numberOfChildren += 1\n\n                            CMS.API.Helpers.onPluginSave = onSave;\n                            return false;\n                        };\n                        return false;\n                    }\n                };\n            };\n\n            // set default definition and open dialog\n            CKEDITOR.dialog.add('cmspluginsDialog', definition);\n        },\n\n        setupDropdown: function (editor) {\n            var tpl = '<div class=\"cke_panel_block\">';\n\t\t\tvar settings = CMS_Editor.getSettings(editor.name);\n\n            // loop through the groups\n            $.each(settings.plugins, function (i, group) {\n                // add template\n                tpl += '<h1 class=\"cke_panel_grouptitle\">' + group.group + '</h1>';\n                tpl += '<ul role=\"presentation\" class=\"cke_panel_list\">';\n                // loop through the plugins\n                $.each(group.items, function (ii, item) {\n                    tpl += '<li class=\"cke_panel_listItem\"><a href=\"#\" rel=\"' + item.type + '\">' +\n                        item.title + '</a></li>';\n                });\n                tpl += '</ul>';\n            });\n\n            tpl += '</div>';\n\n            return tpl;\n        },\n\n        setupContextMenu: function (editor) {\n            var that = this;\n\t\t\tvar settings = CMS_Editor.getSettings(editor.name);\n\n            editor.addMenuGroup('cmspluginsGroup');\n            editor.addMenuItem('cmspluginsItem', {\n                label: settings.lang.CMSPlugins.editLabel,\n                icon: settings.static_url + '/icons/cmsplugins.svg',\n                command: 'cmspluginsEdit',\n                group: 'cmspluginsGroup'\n            });\n\n            editor.removeMenuItem('image');\n\n            editor.contextMenu.addListener(function (element) {\n                var plugin = that.getPluginWidget(element);\n\n                if (plugin) {\n                    return { cmspluginsItem: CKEDITOR.TRISTATE_OFF };\n                }\n            });\n        },\n\n        editPlugin: function (element, editor) {\n            var id = element.getAttribute('id');\n            editor.fire('saveSnapshot');\n\n\t\t\tnew CmsDialog(editor.element.$, saveSuccess => {\n\t\t\t\tif (saveSuccess) {\n\t\t\t\t\twindow.CMS_Editor.requestPluginMarkup(id, editor.element.$)\n\t\t\t\t\t\t.then(markup => {\n\t\t\t\t\t\t\teditor.insertHtml(markup, 'unfiltered_html');\n\t\t\t\t\t\t\teditor.fire('updateSnapshot');\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\t\tconsole.error(error);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\teditor.focus();\n\t\t\t}, () => editor.focus()).editDialog(id);\n        },\n\n        addPlugin: function (item, panel, editor) {\n\n            // hide the panel\n            panel.hide();\n\n            editor.focus();\n            editor.fire('saveSnapshot');\n\n\t\t\tnew CmsDialog(editor.element.$, data => {\n\t\t\t\tif (data.plugin_id) {\n\t\t\t\t\twindow.CMS_Editor.requestPluginMarkup(data.plugin_id, editor.element.$)\n\t\t\t\t\t\t.then(markup => {\n\t\t\t\t\t\t\teditor.insertHtml(markup, 'unfiltered_html');\n\t\t\t\t\t\t\teditor.fire('updateSnapshot');\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\t\tconsole.error(error);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, () => editor.focus()).addDialog(item.attr('rel'), editor.getSelection().getSelectedText());\n        },\n\n        /**\n         * Sets up cleanup requests. If the plugin itself or child plugin was created and then\n         * creation was cancelled - we need to clean up created plugins.\n         *\n         * @method setupCancelCleanupCallback\n         * @public\n         * @param {Object} settings editor settings\n         */\n        setupCancelCleanupCallback: function setupCancelCleanupCallback(settings) {\n            if (!window.parent || !window.parent.CMS || !window.parent.CMS.API || !window.parent.CMS.API.Helpers) {\n                return;\n            }\n\n            var that = this;\n            var CMS = window.parent.CMS;\n            var cancelModalCallback = function cancelModalCallback(e, opts) {\n                if (!settings.delete_on_cancel && !that.unsaved_child_plugins.length) {\n                    return;\n                }\n                if (that.unsaved_child_plugins.length) {\n                    e.preventDefault();\n                    CMS.API.Toolbar.showLoader();\n                    var data = {\n                        token: settings.action_token\n                    };\n\n                    if (!settings.delete_on_cancel) {\n                        data.child_plugins = that.unsaved_child_plugins;\n                    }\n\n                    $.ajax({\n                        method: 'POST',\n                        url: settings.cancel_plugin_url,\n                        data: data,\n                        // use 'child_plugins' instead of default 'child_plugins[]'\n                        traditional: true\n                    }).done(function () {\n                        CMS.API.Helpers.removeEventListener(\n                            'modal-close.text-plugin.text-plugin-' + settings.plugin_id\n                        );\n                        opts.instance.close();\n                    }).fail(function (res) {\n                        CMS.API.Messages.open({\n                            message: res.responseText + ' | ' + res.status + ' ' + res.statusText,\n                            delay: 0,\n                            error: true\n                        });\n                    });\n                }\n            };\n\n            CMS.API.Helpers.addEventListener(\n                'modal-close.text-plugin.text-plugin-' + settings.plugin_id,\n                cancelModalCallback\n            );\n        },\n\n        setupDataProcessor: function (editor) {\n            // priorities of callback execution, see http://docs.ckeditor.com/#!/api/CKEDITOR.editor-event-toHtml\n            var BEFORE_PROCESSING_STARTED = 1;\n            var BEFORE_MARKUP_IS_PARSED = 4;\n\n            /**\n             * This override is required for the inline plugins that have preceding space, because otherwise CKEditor\n             * would remove that space while parsing\n             * html.\n             *\n             * Ref: https://github.com/ckeditor/ckeditor-dev/blob/master/core/htmlparser/fragment.js#L484\n             */\n            CKEDITOR.htmlParser.element = CKEDITOR.tools.override(CKEDITOR.htmlParser.element, function (original) {\n                return function (name, attributes) {\n                    original.call(this, name, attributes);\n\n                    if (name === 'cms-plugin' && attributes['data-cke-real-element-type'] === 'span') {\n                        this._.isBlockLike = false;\n                    }\n                };\n            });\n\n            /**\n             * @function isBlockLikeChildren\n             * @public\n             * @param {CKEDITOR.htmlParser.element} element\n             * @returns {Boolean}\n             */\n            function isBlockLikeChildren(element) {\n                return element.attributes && element.attributes['data-cke-real-element-type'] === 'div';\n            }\n\n            editor.dataProcessor.dataFilter.addRules(\n                {\n                    elements: {\n                        span: function (element) {\n                            if (CKEDITOR.plugins.widget.isParserWidgetWrapper(element)) {\n                                var cmsPluginNode = element.getFirst();\n\n                                if (isBlockLikeChildren(cmsPluginNode)) {\n                                    // eslint-disable-next-line new-cap\n                                    var newWrapper = new CKEDITOR.htmlParser.element(\n                                        'div',\n                                        $.extend({}, element.attributes)\n                                    );\n\n                                    editor.widgets.registered.cmswidget.inline = false;\n                                    newWrapper.children = element.children;\n                                    newWrapper.removeClass('cke_widget_inline');\n                                    newWrapper.removeClass('cke_widget_force_block');\n                                    newWrapper.addClass('cke_widget_block');\n                                    cmsPluginNode.attributes['data-cke-real-element-type'] = 'div';\n\n                                    return newWrapper;\n                                }\n\n                                editor.widgets.registered.cmswidget.inline = true;\n                                cmsPluginNode.attributes['data-cke-real-element-type'] = 'span';\n                            }\n                            return element;\n                        }\n                    }\n                },\n                {\n                    priority: 1,\n                    applyToAll: true\n                }\n            );\n\n            // need to update cms-plugin-nodes with fake \"real type\" so\n            // ckeditor treats them as flow / phrasing elements correctly\n            // + we check if plugin markup should be rendered or not\n            editor.on('toHtml', function (e) {\n                // now i have two problems\n                var newMarkup = e.data.dataValue.replace(\n                    /<cms-plugin(.*?)>([\\s\\S]*?)<\\/cms-plugin>/gi,\n                    function (all, attributes, pluginMarkup) {\n                        var fakeRealType = getFakePluginElement(pluginMarkup);\n\n                        if (attributes.match(/render-plugin=[\"']?false/gi)) {\n                            return '<cms-plugin data-cke-real-element-type=\"' + fakeRealType + '\" ' + attributes + '>' +\n                                    '<' + fakeRealType + ' class=\"cms-ckeditor-plugin-label\">' +\n                                        attributes.replace(/[\\s\\S]*alt=[\"']([\\s\\S]*?)['\"][\\s\\S]*/, '$1') +\n                                    '</' + fakeRealType + '>' +\n                                '</cms-plugin>';\n                        }\n\n                        return '<cms-plugin data-cke-real-element-type=\"' + fakeRealType + '\" ' + attributes + '>' +\n                            pluginMarkup +\n                            '</cms-plugin>';\n                    }\n                );\n\n                // in case we have a stale markup with <p> tag wrapped around\n                // we want to avoid a situation where browser would try to unwrap the tags in a way that would\n                // break the markup. what we do is we replace <cms-plugin> tags with divs if that is necessary,\n                // unwrap them with jQuery (which uses browser mechanism) and then replace the divs back\n                if (newMarkup.match(/<cms-plugin[^>]*(?=data-cke-real-element-type=\\\"div)/)) {\n                    // eslint-disable-next-line max-len\n                    var blockLevelPluginRegex = /<cms-plugin([^>]*(?=data-cke-real-element-type=\\\"div)[\\s\\S]*?>[\\s\\S]*?<\\/)cms-plugin>/g;\n\n                    var unwrappedMarkup = newMarkup.replace(blockLevelPluginRegex, '<div$1div>');\n                    // have to create a wrapper, otherwise we won't be able to return markup back\n                    var unwrappedElementsWrapper = $(unwrappedMarkup).wrapAll('<div>').parent();\n                    var wrappers = unwrappedElementsWrapper.find('div[data-cke-real-element-type=\"div\"]');\n\n                    replaceTagName(wrappers, 'cms-plugin');\n\n                    newMarkup = unwrappedElementsWrapper.html();\n                }\n\n                e.data.dataValue = newMarkup;\n            }, null, null, BEFORE_MARKUP_IS_PARSED);\n\n            editor.on('toHtml', function () {\n                // reset widgets to inline again to avoid creating block-level inline widget\n                if (editor.widgets && editor.widgets.registered && editor.widgets.registered.cmswidget) {\n                    editor.widgets.registered.cmswidget.inline = true;\n                }\n            }, null, null, BEFORE_PROCESSING_STARTED);\n        }\n    });\n})(CMS.$);\n","/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* eslint-env es6 */\n/* jshint esversion: 6 */\n/* global document, window, console */\n\n\nimport './ckeditor4_plugins/cmsplugins/plugin';\nimport './ckeditor4_plugins/cmsresize/plugin';\nimport './ckeditor4_plugins/cmswidget/plugin';\n\n// Configure cmsplugin\n\n\nwindow.cms_editor_plugin = {\n\n    _editors: {},\n    _CSS: [],\n\n    options: {\n        // ckeditor default settings, will be overwritten by CKEDITOR_SETTINGS\n        language: 'en',\n        readOnly: false,\n        skin: 'moono-lisa',\n        toolbar_CMS: [\n            ['Undo', 'Redo'],\n            ['CMSPlugins', 'cmswidget', '-', 'ShowBlocks'],\n            ['Format', 'Styles'],\n            ['TextColor', 'BGColor', '-', 'PasteText', 'PasteFromWord'],\n            ['Scayt'],\n            ['Maximize', ''],\n            '/',\n            ['Bold', 'Italic', 'Underline', 'Strike', '-', 'Subscript', 'Superscript', '-', 'RemoveFormat'],\n            ['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],\n            ['HorizontalRule'],\n            ['NumberedList', 'BulletedList'],\n            ['Outdent', 'Indent', '-', 'Blockquote', '-', 'Link', 'Unlink', '-', 'Table'],\n            ['Source']\n        ],\n        toolbar_HTMLField: [\n            ['Undo', 'Redo'],\n            ['ShowBlocks'],\n            ['Format', 'Styles'],\n            ['TextColor', 'BGColor', '-', 'PasteText', 'PasteFromWord'],\n            ['Scayt'],\n            ['Maximize', ''],\n            '/',\n            ['Bold', 'Italic', 'Underline', 'Strike', '-', 'Subscript', 'Superscript', '-', 'RemoveFormat'],\n            ['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],\n            ['HorizontalRule'],\n            ['NumberedList', 'BulletedList'],\n            ['Outdent', 'Indent', '-', 'Blockquote', '-', 'Link', 'Unlink', '-', 'Table'],\n            ['Source']\n        ],\n        allowedContent: true,\n        toolbarCanCollapse: false,\n        removePlugins: 'resize,flash',\n        extraPlugins: ''\n    },\n\n    // initializes the editor on the target element, with the given html code\n    create: function(el, inModal, content, settings, save_callback) {\n        const all_options = Object.assign({}, this.options, settings.options);\n\n        // add extra plugins that we absolutely must have\n        all_options.extraPlugins = all_options.extraPlugins +=\n            ',CMSPlugins,cmswidget,cmsresize,widget';\n\n        if (typeof all_options.toolbar === 'string' && ('toolbar_' + all_options.toolbar) in all_options) {\n            all_options.toolbar = all_options['toolbar_' + all_options.toolbar];\n        }\n\n        if (CKEDITOR.dtd['cms-plugin'] === undefined) {\n            document.createElement('cms-plugin');\n            CKEDITOR.dtd['cms-plugin'] = CKEDITOR.dtd.div;\n            CKEDITOR.dtd.$inline['cms-plugin'] = 1;\n            // has to be here, otherwise extra <p> tags appear\n            CKEDITOR.dtd.$nonEditable['cms-plugin'] = 1;\n            CKEDITOR.dtd.$transparent['cms-plugin'] = 1;\n            CKEDITOR.dtd.body['cms-plugin'] = 1;\n\n            // add additional plugins (autoloads plugins.js)\n            CKEDITOR.skin.addIcon('CMSPlugins', settings.static_url +\n                '/icons/cmsplugins.svg');\n            CKEDITOR.disableAutoInline = true\n        };\n        if (!(el.id in this._editors)) {\n            if (el.tagName === 'TEXTAREA') {\n                const editor = CKEDITOR.replace(el, all_options);\n                this._editors[el.id] = editor;\n\n                // Maximize editor if alone in modal\n                if (inModal) {\n\n                    setTimeout(() => editor.execCommand('maximize'), 300);\n                }\n            } else {\n                const editor = CKEDITOR.inline(el, all_options);\n                this._editors[el.id] = editor;\n                el.addEventListener('blur', save_callback);\n                editor.on('change', () => el.dataset.changed='true');\n                // Let ckeditor first add its styles\n                setTimeout(this._manageStyles, 200);\n            }\n        }\n    },\n\n    _manageStyles: function () {\n        const styles = document.querySelectorAll('link[rel=\"stylesheet\"][type=\"text/css\"][href*=\"ckeditor4\"]');\n        if (styles.length > 0) {\n            // Styles are installed in the document head, but we need to clone them\n            // for later recovery\n            styles.forEach((style) => {\n                    if (cms_editor_plugin._CSS.indexOf(style) === -1) {\n                        cms_editor_plugin._CSS.push(style.cloneNode(true));\n                    }\n                }\n            );\n        } else {\n            cms_editor_plugin._CSS.forEach((style) => document.head.appendChild(style));\n        }\n    },\n\n    // returns the edited html code\n    getHTML: function(el) {\n        return this._editors[el.id].getData();\n    },\n\n    // returns the edited content as json\n    getJSON: function(el) {\n        return undefined;\n    },\n\n    // destroy the editor\n    destroyEditor: function(el) {\n        this._editors[el.id].destroy();\n        delete this._editors[el.id];\n    }\n};\n"],"names":[],"sourceRoot":""}