{"version":3,"file":"static/djangocms_text/bundles/bundle.editor.min.js","mappings":";;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEoC;;;ACtGpC;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,qEAAqE,iCAAiC;AACtG;AACA;AACA;AACA,6DAA6D;AAC7D,gEAAgE;AAChE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd;AACA,gCAAgC;AAChC,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,yCAAyC;AACzC,0CAA0C;AAC1C;AACA;AACA;AACA,yCAAyC;AACzC,0CAA0C;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,yEAAyE,cAAc;AACvF,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,+BAA+B,EAAE,gCAAgC;AACtF;AACA;AACA;AACA;AACA,qBAAqB,YAAY;AACjC,SAAS;AACT;AACA;;AAEA,oDAAe,SAAS,EAAC;;;AC/PzB;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,mDAAmD,KAAK;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,GAAG,IAAI,cAAc;AAClE;AACA,wCAAwC,aAAa,UAAU,GAAG;AAClE,mCAAmC,0BAA0B,UAAU,aAAa;AACpF,6BAA6B,oBAAoB;AACjD,6BAA6B,oBAAoB,GAAG,oCAAoC;AACxF;AACA;AACA;AACA,6CAA6C,GAAG,IAAI,cAAc;AAClE;AACA,yCAAyC,GAAG,UAAU,aAAa,GAAG,qCAAqC,SAAS,oBAAoB;AACxI;AACA,8CAA8C,aAAa,GAAG,kDAAkD,GAAG,aAAa;AAChI,iBAAiB;AACjB;AACA;AACA;AACA,sDAAsD,GAAG,UAAU,aAAa,WAAW,oBAAoB;AAC/G;AACA;AACA;AACA;AACA;AACA,oCAAoC,YAAY,oBAAoB,cAAc;AAClF;AACA;AACA;AACA,6CAA6C,cAAc,YAAY,QAAQ;AAC/E;AACA;AACA,KAAK;AACL;AACA;;;AAGA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,2DAA2D,WAAW;AACtE;AACA;AACA;AACA;AACA,4DAA4D,gCAAgC;AAC5F;AACA;AACA;AACA;AACA;;;;;AAKmE;;;ACrbnE;AACA;AACA;;AAEgD;AACR;AACH;;AAErC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,aAAS;AAChC,uBAAuB,SAAS;AAChC,2BAA2B,aAAa;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI,YAAY;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,+CAA+C,aAAa;AAC5D;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,uFAAuF;AACvF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,kEAAkE;AAClE,2DAA2D;AAC3D;AACA;AACA;AACA,8CAA8C,iBAAiB,GAAG,iBAAiB,GAAG,YAAY;AAClG;AACA;AACA,6FAA6F,UAAU;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,2CAA2C;AAC3C,kCAAkC;AAClC,gDAAgD;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,yDAAyD;AACzD;AACA,UAAU;AACV;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,wBAAwB;AAC9D;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,sCAAsC,wBAAwB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,gBAAgB;AAC9E;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,iCAAiC;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA,gFAAgF;AAChF,2FAA2F;;AAE3F;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB,GAAG,qCAAqC;AACvF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI,GAAG,qCAAqC;AAC7D;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,2BAA2B,GAAG,qCAAqC;;AAE1F,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,yCAAyC;AACzC;AACA;AACA,iBAAiB;AACjB;AACA;AACA,yBAAyB,mDAAmD;AAC5E,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA","sources":["webpack://djangocms-text/./private/js/cms.texteditor.js","webpack://djangocms-text/./private/js/cms.linkfield.js","webpack://djangocms-text/./private/js/cms.dialog.js","webpack://djangocms-text/./private/js/cms.editor.js"],"sourcesContent":["/* eslint-env es6 */\n/* jshint esversion: 6 */\n/* global document, window, console */\n\nclass CmsTextEditor {\n    constructor (el, options, save_callback) {\n        this.el = el;\n        this.plugin_identifier = this.find_plugin_identifier();\n        const id_split = this.plugin_identifier.split('-');\n        this.plugin_id = parseInt(id_split[id_split.length-1]);\n        this.options = options;\n        this.events = {};\n        this.save = save_callback;\n        this.init();\n    }\n\n    destroy () {\n        this.el.removeEventListener('focus', this._focus.bind(this));\n        this.el.removeEventListener('blur', this._blur.bind(this));\n        this.el.removeEventListener('input', this._change);\n        this.el.removeEventListener('keydown', this._key_down);\n        this.el.removeEventListener('paste', this._paste);\n        this.el.setAttribute('contenteditable', 'false');\n    }\n\n    init () {\n        this.el.setAttribute('contenteditable', 'plaintext-only');\n        if (!this.el.isContentEditable) {\n            this.el.setAttribute('contenteditable', 'true');\n            this.options.enforcePlaintext = true;\n\n        }\n        this.el.setAttribute('spellcheck', this.options.spellcheck || 'false');\n        this.el.addEventListener('input', this._change);\n        this.el.addEventListener('focus', this._focus.bind(this));\n        this.el.addEventListener('blur', this._blur.bind(this));\n        this.el.addEventListener('keydown', this._key_down);\n        if (this.options.enforcePlaintext) {\n            this.el.addEventListener('paste', this._paste);\n        }\n    }\n\n    _key_down (e) {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n            e.target.blur();\n        }\n        if (e.key === 'Escape') {\n            e.preventDefault();\n            if (e.target.dataset.undo) {\n                e.target.innerText = e.target.dataset.undo;\n                e.target.dataset.changed = false;\n            }\n            e.target.blur();\n        }\n    }\n\n    _focus (e) {\n        this.options.undo = this.el.innerText;\n    }\n\n    _blur (e) {\n        this.save(e.target, (el, response) => {\n            setTimeout(() => {\n                if (e.target.dataset.changed === 'true') {\n                    e.target.innerText = this.options.undo;\n                    e.target.dataset.changed = 'false';\n                    e.target.focus();\n                }\n            }, 100);\n        });\n    }\n\n    _paste (e) {\n        // Upon past only take the plain text\n        e.preventDefault();\n        let text = e.clipboardData.getData('text/plain');\n        if (text) {\n            const [start, end] = [e.target.selectionStart, this.el.selectionEnd];\n            e.target.setRangeText(text, start, end, 'select');\n        }\n    }\n\n    _change (e) {\n        e.target.dataset.changed = 'true';\n    }\n\n    find_plugin_identifier () {\n        const header = 'cms-plugin-';\n\n        for (let cls of this.el.classList) {\n            if (cls.startsWith(header)) {\n                let items = cls.substring(header.length).split('-');\n                if (items.length === 4 && items[items.length-1] == parseInt(items[items.length-1])) {\n                    return items.join('-');\n                }\n            }\n        }\n        return null;\n    }\n}\n\nexport { CmsTextEditor as default };\n","/* eslint-env es11 */\n/* jshint esversion: 11 */\n/* global document, window, console */\n\n\nclass LinkField {\n    constructor(element, options) {\n        const hasFocus = element.contains(document.activeElement);\n\n        this.options = options;\n        this.urlElement = element;\n        this.form = element.closest(\"form\");\n        this.selectElement = this.form?.querySelector(`input[name=\"${this.urlElement.name + '_select'}\"]`);\n        this.dropdownIsOpen = false;\n        this.boundCloseDropdown = this.closeDropdown.bind(this);\n        if (this.selectElement) {\n            this.urlElement.setAttribute('type', 'hidden');  // Two input types?\n            this.selectElement.setAttribute('type', 'hidden');  // Make hidden and add common input\n            this.createInput(hasFocus);\n            this.registerEvents();\n        }\n        this.populateField();\n    }\n\n    createInput(hasFocus = false) {\n        this.inputElement = document.createElement('input');\n        this.inputElement.setAttribute('type', 'text');\n        this.inputElement.setAttribute('autocomplete', 'off');\n        this.inputElement.setAttribute('spellcheck', 'false');\n        this.inputElement.setAttribute('autocorrect', 'off');\n        this.inputElement.setAttribute('autocapitalize', 'off');\n        this.inputElement.setAttribute('placeholder', this.urlElement.getAttribute('placeholder') ||'');\n        this.inputElement.className = this.urlElement.className;\n        this.inputElement.classList.add('cms-linkfield-input');\n\n        this.wrapper = document.createElement('div');\n        this.wrapper.classList.add('cms-linkfield-wrapper');\n        this.urlElement.insertAdjacentElement('afterend', this.wrapper);\n        this.urlElement.setAttribute('type', 'hidden');\n        this.dropdown = document.createElement('div');\n        this.dropdown.classList.add('cms-linkfield-dropdown');\n        if (this.form.style.zIndex) {\n            this.dropdown.style.zIndex = this.form.style.zIndex + 1;\n        }\n        this.wrapper.appendChild(this.inputElement);\n        this.wrapper.appendChild(this.dropdown);\n        if (hasFocus) {\n            this.inputElement.focus();\n        }\n    }\n\n    populateField() {\n        if (this.selectElement) {\n            if (this.selectElement.value) {\n                this.handleChange();\n                this.inputElement.classList.add('cms-linkfield-selected');\n            } else if (this.urlElement.value) {\n                this.inputElement.value = this.urlElement.value;\n                this.inputElement.classList.remove('cms-linkfield-selected');\n            } else {\n                this.inputElement.value = '';\n                this.search();  // Trigger search to populate dropdown\n                this.closeDropdown();  // Close dropdown if it was open\n                this.inputElement.classList.remove('cms-linkfield-selected');\n            }\n            if (this.selectElement.getAttribute('data-value')) {\n                this.inputElement.value = this.selectElement.getAttribute('data-value');\n                this.inputElement.classList.add('cms-linkfield-selected');\n            }\n            if (this.selectElement.getAttribute('data-href')) {\n                this.urlElement.value = this.selectElement.getAttribute('data-href');\n                this.inputElement.classList.add('cms-linkfield-selected');\n            }\n            this.dropdown.innerHTML = '';  // CSS hides dropdown when empty\n        }\n    }\n\n    registerEvents() {\n        this.inputElement.addEventListener('input', this.handleInput.bind(this));\n        this.inputElement.addEventListener('click', event => {\n            if (this.dropdownIsOpen) {\n                this.closeDropdown();\n            } else {\n                this.search();\n            }\n        });\n        // Allow focus-triggered dropdown for keyboard accessibility\n        this.inputElement.addEventListener('focus', event => {\n            if (!this.dropdownIsOpen) {\n                this.search();\n            }\n        });\n        // Keyboard navigation (open dropdown on ArrowDown)\n        this.inputElement.addEventListener('keydown', event => {\n            if ((event.key === 'ArrowDown' || event.key === 'Down') && !this.dropdownIsOpen) {\n                event.preventDefault();  // Prevent cursor movement\n                event.stopPropagation();  // Prevent closing the input\n                this.search();\n            }\n            if ((event.key === 'Escape' || event.key === 'Esc') && this.dropdownIsOpen) {\n                event.preventDefault();  // Prevent closing the input\n                event.stopPropagation();  // Prevent closing the dropdown\n                this.closeDropdown();\n            }\n        });\n        this.urlElement.addEventListener('input', event => {\n            this.inputElement.value = event.target.value || '';\n            this.inputElement.classList.remove('cms-linkfield-selected');\n            // this.selectElement.value = '';\n        });\n        this.selectElement.addEventListener('input', event => this.handleChange(event));\n        this.dropdown.addEventListener('click', this.handleSelection.bind(this));\n        this.intersection = new IntersectionObserver((entries, observer) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    this.updateSearch();\n                    observer.disconnect();\n                }\n            });\n        });\n    }\n\n    handleInput(event) {\n        // User typed something into the field -> no predefined value selected\n        this.selectElement.value = '';\n        this.urlElement.value = this.inputElement.value;\n        this.inputElement.classList.remove('cms-linkfield-selected');\n        this.search();\n       }\n\n    showResults(response, page = 1) {\n        let currentSection;  // Keep track of the current section so that paginated data can be added\n        if (page === 1) {\n            // First page clears the dropdown\n            this.dropdown.innerHTML = '';\n            currentSection = '';\n        } else {\n            // Remove the more link\n            const more = this.dropdown.querySelector('.cms-linkfield-more');\n            currentSection = more?.dataset.group;\n            more?.remove();\n        }\n        response.results.forEach(result => currentSection = this._addResult(result, currentSection));\n        if (response?.pagination?.more) {\n            const more = document.createElement('div');\n            more.classList.add('cms-linkfield-more');\n            more.setAttribute('data-page', page + 1);\n            more.setAttribute('data-group', currentSection);\n            more.textContent = '...';\n            this.dropdown.appendChild(more);\n            this.intersection.observe(more);\n        }\n    }\n\n    _addResult(result, currentSection = '') {\n        const item = document.createElement('div');\n        item.textContent = result.text;\n        if (result.id) {\n            item.classList.add('cms-linkfield-option');\n            item.setAttribute('data-value', result.id);\n            item.setAttribute('data-href', result.url || '#');\n            item.setAttribute('data-text', result.verbose || result.text);\n        }\n        if (result.children && result.children.length > 0) {\n            item.classList.add('cms-linkfield-parent');\n            if (result.text !== currentSection) {\n                this.dropdown.appendChild(item);\n                currentSection = result.text;\n            }\n            result.children.forEach(child => {\n                this._addResult(child);\n            });\n        } else {\n            this.dropdown.appendChild(item);\n        }\n        return currentSection;\n    }\n\n    handleSelection(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        if (event.target.classList.contains('cms-linkfield-option')) {\n            const value = event.target.getAttribute('data-text') || event.target.textContent;\n            this.inputElement.value = value.trim();\n            this.inputElement.classList.add('cms-linkfield-selected');\n            this.urlElement.value = event.target.getAttribute('data-href');\n            this.selectElement.value = event.target.getAttribute('data-value');\n            this.inputElement.blur();\n            this.closeDropdown(event);\n        }\n        // this.dropdown.innerHTML = '';  // CSS hides dropdown when empty\n    }\n\n    openDropdown(event) {\n        if (!this.dropdownIsOpen) {\n            this.dropdownIsOpen = true;\n            this.dropdown.classList.add('open');\n            document.addEventListener('click', this.boundCloseDropdown);\n        }\n    }\n\n    closeDropdown(event) {\n        if (!event || !this.wrapper.contains(event.target) || this.dropdown.contains(event.target)) {\n            this.dropdownIsOpen = false;\n            this.dropdown.classList.remove('open');\n            document.removeEventListener('click', this.boundCloseDropdown);\n        }\n    }\n\n    toggleDropdown() {\n       this.dropdownIsOpen ? this.closeDropdown() : this.openDropdown();\n    }\n\n    handleChange(event) {\n        if (this.selectElement.value && this.options.url) {\n            fetch(this.options.url + (this.options.url.includes('?') ? '&g=' : '?g=') + encodeURIComponent(this.selectElement.value))\n                .then(response => response.json())\n                .then(data => {\n                    this.inputElement.value = data.text;\n                    this.inputElement.classList.add('cms-linkfield-selected');\n                    this.urlElement.value = data.url || '#';\n                });\n        }\n    }\n\n    search(page = 1) {\n        this.openDropdown();\n        const searchText = this.inputElement.value.toLowerCase();\n        this.fetchData(searchText, page).then(response => {\n            this.showResults(response, page);\n        }).catch (error => {\n           this.dropdown.innerHTML = `<div class=\"cms-linkfield-error\">${error.message}</div>`;\n        });\n    }\n\n    updateSearch() {\n        const more = this.dropdown.querySelector('.cms-linkfield-more');\n        if (more) {\n            this.search(parseInt(more.getAttribute('data-page')));\n        }\n    }\n\n    fetchData(searchText, page ) {\n        if (this.options.url) {\n            const url = this.options.url + (this.options.url.includes('?') ? '&' : '?') +\n                `q=${encodeURIComponent(searchText)}${page > 1 ? '&page=' + page : ''}`;\n            return fetch(url)\n                .then(response => response.json());\n        }\n        return new Promise(resolve => {\n            resolve({results: []});\n        });\n    }\n}\n\nexport default LinkField;\n","/* eslint-env es6 */\n/* jshint esversion: 6 */\n/* global document, window, console */\n\n\nclass CmsDialog {\n    /**\n     * Constructor for creating an instance of the class showing a django CMS modal in a\n     * modal HTML dialog element to show a plugin admin form in an iframe.\n     *\n     * The django CMS modal is resizable (thanks to CSS) and movable. It cannot be\n     * minimized or maximized. It blocks all other input on the page until it is closed.\n     *\n     * The dialog element is attached to the <div id=\"cms-top\"> at the beginning of a page\n     * with a toolbar. The dialog is removed when it is closed.\n     *\n     * @param {Element} el - The editor element to be associated with the instance.\n     * @param {Function} saveSuccess - The success callback function to be invoked upon save.\n     * @param {Function} cancel - The callback function to be invoked upon cancellation.\n     */\n    constructor(el, saveSuccess, cancel) {\n        this.el = el;\n        this.saveSuccess = saveSuccess;\n        this.cancel = cancel;\n        this.close = this._close.bind(this);\n    }\n\n    /**\n     * Create a plugin modal dialog.\n     * @return {HTMLIFrameElement} - The newly created iframe element.\n     */\n    pluginDialog() {\n        this.dialog = document.createElement(\"dialog\");\n        this.dialog.classList.add(\"cms-dialog\");\n        this.dialog.dataset.editor = this.el.id;\n        this.dialog.innerHTML = `\n            <div class=\"cms-modal-head\">\n                <span class=\"cms-modal-title\">\n                    <span class=\"cms-modal-title-prefix\"></span>\n                    <span class=\"cms-modal-title-suffix\"></span>\n                    <span class=\"cms-modal-close cms-icon cms-icon-close\"></span>\n                </span>\n            </div>\n            <div class=\"cms-modal-body\">\n            </div>\n            <div class=\"cms-modal-foot\">\n                <div class=\"cms-modal-buttons\">\n                <div class=\"cms-modal-buttons-inner\">\n                    <div class=\"cms-modal-item-buttons\"><a href=\"#\" class=\"cms-btn cms-btn-action default\">Save</a></div>\n                    <div class=\"cms-modal-item-buttons\"><a href=\"#\" class=\"cms-btn cms-btn-close-action\">Cancel</a></div>\n                </div>\n            </div>\n        `;\n\n        (window.parent || window).document.querySelector('div.cms').prepend(this.dialog);\n        const settings = window.CMS_Editor.getSettings(this.el);\n        this.dialog.querySelector(\".cms-modal-title-suffix\").textContent = settings.lang.edit;\n        this.dialog.querySelector(\".cms-modal-title-prefix\").textContent = settings.lang.toolbar;\n        this.dialog.querySelector('.cms-modal-title').addEventListener('mousedown', (event) => {\n            this.dragDialog(event);\n        });\n        this.dialog.querySelector('.cms-modal-title').addEventListener('touchstart', (event) => {\n            this.swipeDialog(event);\n        });\n        const closeEvent = (event) => {\n            event.stopPropagation();\n            event.preventDefault();\n            this.close();\n            if (this.cancel) {\n                this.cancel(event);\n            }\n        };\n        this.dialog.addEventListener(\"close\", (event) => closeEvent(event));\n        this.dialog\n            .querySelector(\".cms-btn-close-action\")\n            .addEventListener('click', (event) => closeEvent(event));\n        this.dialog\n            .querySelector(\".cms-modal-close\")\n            .addEventListener('click', (event) => closeEvent(event));\n        this.dialog.addEventListener('keydown', (event) => {\n            if (event.key === 'Escape') {\n                // Don't propagate the event to the CMS modal, or it will close, too\n                event.stopPropagation();\n            }\n        });\n        const iframe = document.createElement('iframe');\n        this.dialog.querySelector(\".cms-modal-body\").append(iframe);\n        return iframe;\n    }\n\n    /**\n     * Opens the edit dialog for a specific plugin.\n     *\n     * @param {string} pluginId - The ID of the plugin to be edited.\n     *\n     * @return {void}\n     */\n    editDialog(pluginId) {\n        const iframe = this.pluginDialog();\n\n        window.CMS_Editor.editPluginForm(pluginId, iframe, this.el,\n            (el, content, heading, submitrow) => this._dialogLoaded(el, content, heading, submitrow),\n            (el, content, data) => this._dialogSaved(el, content, data));\n    }\n\n    /**\n     * Dialog to add a plugin.\n     *\n     * @param {string} pluginType - The type of the plugin.\n     * @param {string} selectionText - The selected text (will be copied into the input field with\n     *                                 the class \"js-prepopulate-selected-text\").\n     *\n     * @return {void}\n     */\n    addDialog(pluginType, selectionText) {\n        const iframe = this.pluginDialog();\n\n        window.CMS_Editor.addPluginForm(pluginType, iframe, this.el,\n            (el, content, heading, submitrow) =>\n                this._dialogLoaded(el, content, heading, submitrow, selectionText),\n            (el, content, data) => this._dialogSaved(el, content, data));\n    }\n\n    _dialogLoaded(el, content, heading, submitrow, selectionText) {\n        if (submitrow) {\n            this.dialog.querySelector('.cms-btn-action.default')\n                .addEventListener('click', (event) => {\n                    event.stopPropagation();\n                    event.preventDefault();\n                    submitrow.closest('form').submit();\n                });\n        } else {\n            this.dialog.querySelector('.cms-btn-action.default').style.display = 'none';\n        }\n        if (heading) {\n            this.dialog.querySelector(\".cms-modal-title-suffix\").textContent = heading.textContent;\n        }\n        this.open();\n        // If form is big (i.e., scrollbars appear), make the dialog bigger\n        if (content.documentElement.scrollHeight > content.documentElement.clientHeight) {\n            this.dialog.style.height = \"60%\";\n            this.dialog.style.width = \"80%\";\n            content.documentElement.scrollTop = 0;\n        }\n\n        // Prefill marked input fields with selected text\n        selectionText = selectionText || '';\n        if (selectionText.length > 0) {\n            let fillInput = content.querySelector('.js-ckeditor-use-selected-text,.js-prepopulate-selected-text') ||\n                content.querySelector('#id_name');\n            if (fillInput) {  // Does such a field exist?\n                if (!(fillInput.value.trim())) {\n                    fillInput.value = selectionText;  // Prefill the field only if it is empty\n                    fillInput.focus();\n                }\n            }\n        }\n    }\n\n    _dialogSaved(el, content, data) {\n        this.saveSuccess(data);\n        this.close();\n    }\n\n    /**\n     * Opens the dialog by showing it in a modal state.\n     *\n     * @return {void}\n     */\n    open() {\n        this.dialog.showModal();\n    }\n\n    /**\n     * Removes the dialog\n     *\n     * @method close\n     * @memberof ClassName\n     * @returns {void}\n     */\n    _close() {\n        this.dialog.removeEventListener(\"close\", this.close);\n        this.dialog.remove();\n    }\n\n    /**\n     * Allows dragging the dialog based on the user's mouse movements.\n     *\n     * @param {Event} event - The mouse event that triggers the drag.\n     */\n    dragDialog(event) {\n        if (event.which !== 1) {\n            return;\n        }\n        event.preventDefault();\n        const firstX = event.pageX;\n        const firstY = event.pageY;\n        const initialX = parseInt(getComputedStyle(this.dialog).left);\n        const initialY = parseInt(getComputedStyle(this.dialog).top);\n\n        const dragIt = (e) => {\n            this.dialog.style.left = initialX + e.pageX - firstX + 'px';\n            this.dialog.style.top = initialY + e.pageY - firstY + 'px';\n        };\n        const Window = window.parent || window;\n        Window.addEventListener('mousemove', dragIt, false);\n        Window.addEventListener('mouseup', (e) => {\n            Window.removeEventListener('mousemove', dragIt, false);\n        }, false);\n    }\n\n    /**\n     * Allows dragging the dialog based on the user's touch movements.\n     *\n     * @param {Event} event - The touch event that triggers the drag.\n     */\n    swipeDialog(event) {\n        event.preventDefault();\n\n        const firstX = event.pageX;\n        const firstY = event.pageY;\n        const initialX = parseInt(getComputedStyle(this.dialog).left);\n        const initialY = parseInt(getComputedStyle(this.dialog).top);\n\n        const swipeIt = (e) => {\n            const contact = e.touches;\n            this.dialog.style.left = initialX + contact[0].pageX - firstX + 'px';\n            this.dialog.style.top = initialY + contact[0].pageY - firstY + 'px';\n        };\n\n        const Window = window.parent || window;\n        Window.addEventListener('touchmove', swipeIt, false);\n        Window.addEventListener('touchend', (e) => {\n            Window.removeEventListener('touchmove', swipeIt, false);\n        }, false);\n    }\n}\n\n\n/**\n * Represents an editor form, e.g. to enter a link address, or a pop-up toolbar.\n *\n * The form is contained in a (non-modal) dialog element which is attached to the editor's div wrapper.\n *\n *\n * @constructor\n * @param {*} el - The element to attach the form to.\n * @param {function} saveSuccess - The callback function to be called when form is successfully submitted.\n * @param {function} cancel - The callback function to be called when form is cancelled.\n */\nclass CmsForm {\n     constructor(el, saveSuccess, cancel) {\n        this.el = el;\n        this.saveSuccess = saveSuccess;\n        this.cancel = cancel;\n        this.close = this._close.bind(this);\n    }\n\n    formDialog(form, options) {\n        this.dialog = document.createElement(\"dialog\");\n        this.dialog.classList.add(\"cms-form-dialog\");\n        if (options.toolbar) {\n            this.dialog.innerHTML = form;\n        } else {\n            this.dialog.innerHTML = `\n                <form class=\"cms-form\">\n                    <div class=\"cms-form-inputs\">${form}</div>\n                    <div class=\"cms-form-buttons\">\n                        <span class=\"submit\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-check-lg\" viewBox=\"0 0 16 16\">\n                            <path d=\"M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425z\"/>\n                            </svg></span>\n                        <span class=\"cancel\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-x-lg\" viewBox=\"0 0 16 16\">\n                            <path d=\"M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z\"/>\n                            </svg></span>\n                    </div>\n                </form>`;\n        }\n\n        if (options && options.x && options.y) {\n            const el_pos = this.el.getBoundingClientRect();\n            if (options.x > window.innerWidth / 2) {\n                this.dialog.classList.add(\"right\");\n                this.dialog.style.right = (el_pos.x + el_pos.width - options.x - 24 - 10) + 'px';\n            } else {\n                this.dialog.style.left = (options.x - el_pos.x - 24) + 'px';\n            }\n            this.dialog.style.top = (options.y - el_pos.y + 5) + 'px';\n            this.dialog.style.transform = 'none';\n        }\n\n        // Add the dialog to the inline editor\n        this.el.prepend(this.dialog);\n        this.dialog.addEventListener(\"close\", (event) => {\n            event.stopPropagation();\n            this.close();\n        });\n        document.addEventListener(\"click\", this.close);\n        if (this.dialog.querySelector('.cancel')) {\n            this.dialog.querySelector(\".cancel\")\n                .addEventListener('click',  () => this.close() );\n        }\n        this.dialog.addEventListener('keydown', (event) => {\n            if (event.key === 'Escape') {\n                // Don't propagate the event to the CMS modal, or it will close, too\n                event.stopPropagation();\n                event.preventDefault();\n                this.close();\n            }\n        });\n        const formElement = this.dialog.querySelector('form');\n        if (formElement) {\n            formElement.addEventListener('submit', (event) => {\n                event.preventDefault();\n                this.submit();\n            });\n            this.dialog.querySelector(\".submit\").addEventListener('click', (event) => {\n                event.preventDefault();\n                if (this.dialog.querySelector('form').reportValidity()) {\n                    this.submit();\n                }\n            });\n        }\n        return formElement || this.dialog;\n    }\n\n    open() {\n        this.dialog.show();\n        const firstInput = this.dialog.querySelector('input');\n        if (firstInput) {\n            firstInput.focus();\n        }\n    }\n\n    _close(event) {\n        if (!event || !this.dialog.contains(event.target)) {\n            // Do only close if the click is outside the dialog\n            document.removeEventListener(\"click\", this.close);\n            this.dialog.removeEventListener(\"close\", this.close);\n            if (this.cancel) {\n                this.cancel(event);\n            }\n            this.dialog.remove();\n        }\n    }\n\n    submit() {\n        const data = new FormData(this.dialog.querySelector('form'));\n        this.dialog.remove();\n        this.saveSuccess(data);\n    }\n}\n\n\n/**\n * Converts a given form array to HTML representation.\n *\n * @param {Array} formArray - The array containing form elements.\n * @returns {string} - The HTML form representation.\n */\nfunction formToHtml(formArray) {\n    'use strict';\n    let form = '';\n\n    formArray.forEach((element) => {\n        const id = Math.random().toString(36).slice(2, 9);\n        switch(element.type) {\n            case 'text':\n            case 'url':\n                if (element.label) {\n                    form += `<label for=\"id${id}\">${element.label}</label>`;\n                }\n                form += `<input type=\"${element.type}\" id=\"id${id}\"\n                    placeholder=\"${element.placeholder || ''}\" name=\"${element.name}\"\n                    class=\"${element.class || ''}\"\n                    value=\"${element.value || ''}\"${element.required ? ' required' : ''}>`;\n                break;\n            case 'select':\n                if (element.label) {\n                    form += `<label for=\"id${id}\">${element.label}</label>`;\n                }\n                form += `<select id=\"id${id}\" name=\"${element.name}\"${element.required ? ' required' : ''} class=\"${element.class || ''}\">`;\n                element.options.forEach((option) => {\n                    form += `<option value=\"${option.value}\"${option.value === element.value ? ' selected' : ''}>${option.label}</option>`;\n                });\n                form += '</select>';\n                break;\n            case 'hidden':\n                form += `<input type=\"hidden\" id=\"id${id}\" name=\"${element.name}\" value=\"${element.value || ''}\">`;\n                break;\n            case 'hr':\n                form += '<hr>';\n                break;\n            case 'link':\n                form += `<a href=\"${element.url}\" target=\"_blank\">${element.label}</a>`;\n                break;\n            case 'section':\n                const content = formToHtml(element.content);\n                form += `<details><summary>${element.label}</summary>${content}</details>`;\n                break;\n        }\n    });\n    return form + '<input type=\"submit\" hidden />';\n}\n\n\n/**\n * Populates a given HTML form with values from a form object.\n *\n * @param {HTMLFormElement} htmlForm - The HTML form element to populate.\n * @param {object} attributes - The attributes to populate the form with.\n * @param {Array} formObject - The form object containing input values.\n */\nfunction populateForm(htmlForm,  attributes, formObject) {\n    'use strict';\n    if (attributes && formObject) {\n        for (const input of formObject) {\n            let value;\n            if (input.name in attributes) {\n                value = attributes[input.name] || '';\n            } else {\n                value = input.value || '';\n            }\n            const field = htmlForm.querySelector(`[name=\"${input.name}\"]`);\n            if (field && field.value !== value) {\n                field.value = value;\n                if (field.getAttribute('type') === 'hidden') {\n                    // Trigger change event for hidden fields\n                    field.dispatchEvent(new Event('input', {bubbles: true, cancelable: true}));\n                }\n            }\n        }\n    }\n}\n\n\n\n\nexport { formToHtml, populateForm, CmsForm, CmsDialog as default };\n","/* eslint-env es11 */\n/* jshint esversion: 11 */\n/* global window, document, fetch, IntersectionObserver, URLSearchParams, console */\n\nimport CmsTextEditor from './cms.texteditor.js';\nimport LinkField from \"./cms.linkfield\";\nimport CmsDialog from \"./cms.dialog\";\n\n// #############################################################################\n// CMS Editor\n// #############################################################################\n\nclass CMSEditor {\n\n    // CMS Editor: constructor\n    // Initialize the editor object\n    constructor() {\n        this._global_settings = {};\n        this._editor_settings = {};\n        this._generic_editors = {};\n        this._admin_selector = 'textarea.CMS_Editor';\n        this._admin_add_row_selector = 'body.change-form .add-row a';\n        this._inline_admin_selector = 'body.change-form .form-row';\n        this.API = {\n            LinkField: LinkField,\n            CmsDialog: CmsDialog,\n            CmsTextEditor: CmsTextEditor,\n        };\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // Get the CMS object from the parent window\n            if (window.CMS !== undefined && window.CMS.config !== undefined) {\n                this.mainWindow = window;\n                this.CMS = window.CMS;\n            } else {\n                this.mainWindow = window.parent;\n                this.CMS = window.parent.CMS;\n            }\n\n            if (this.CMS) {\n                // Only needs to happen on the main window.\n                this.CMS.$(window).on('cms-content-refresh', () => {\n                    this._resetInlineEditors();\n                });\n            }\n\n            if (document.querySelector(this._inline_admin_selector + '.empty-form')) {\n                // Marker for inline admin form: do **not** initialize empty form templates\n                this._admin_selector = this._inline_admin_selector + ':not(.empty-form) ' + this._admin_selector;\n            }\n            this.initAll();\n        }, { once: true });\n    }\n\n    // CMS Editor: init_all\n    // Initialize all editors on the page\n    initAll () {\n        // Get global options from script element\n        try {\n            this._global_settings = JSON.parse(document.getElementById('cms-editor-cfg').textContent);\n        } catch (e) {\n            this._global_settings = {};\n        }\n\n        // All textareas with class CMS_Editor: typically on admin site\n        document.querySelectorAll(this._admin_selector).forEach(\n            (el) => this.init(el), this\n        );\n        // Register all plugins on the page for inline editing\n        this.initInlineEditors();\n\n        // Listen to the add row click for inline admin in a change form\n        if (this._admin_add_row_selector) {\n            setTimeout(() => {\n                for (const el of document.querySelectorAll(this._admin_add_row_selector)) {\n                    el.addEventListener('click', (event) => {\n                        setTimeout(() => {\n                            document.querySelectorAll(this._admin_selector).forEach(\n                                (el) => this.init(el), this\n                            );\n                        }, 0);\n                    });\n                }\n            }, 0);\n        }\n    }\n\n    // CMS Editor: init\n    // Initialize a single editor\n    init (el) {\n        if (!el.id) {\n            el.id = \"cms-edit-\" + Math.random().toString(36).slice(2, 9);\n        }\n        // Create editor\n        if (!el.dataset.cmsType || el.dataset.cmsType === 'TextPlugin' || el.dataset.cmsType === 'HTMLField') {\n            this._createRTE(el);\n        } else if (el.dataset.cmsType === 'CharField') {\n            // Creat simple generic text editor\n            this._generic_editors[el.id] = new CmsTextEditor(el, {\n                    spellcheck: el.dataset.spellcheck || 'false',\n                },\n                (el) => this.saveData(el)\n            );\n        }\n    }\n\n    // CMS Editor: initInlineEditors\n    // Register all plugins on the page for inline editing\n    // This is called from init_all\n    initInlineEditors() {\n        if (this.CMS === undefined || this.CMS._plugins === undefined) {\n            // Check the CMS frontend for plugins\n            // no plugins -> no inline editors\n            return;\n        }\n\n        this.observer = this.observer || new IntersectionObserver( (entries) => {\n            entries.forEach((entry) => {\n                if (entry.isIntersecting) {\n                    this.observer.unobserve(entry.target);  // Only init once\n                    this.init(entry.target);\n                }\n            }, this);\n        }, {\n            root: null,\n            threshold: 0.05\n        });\n        this.observer.disconnect();\n\n        let generic_inline_fields = document.getElementById('cms-generic-inline-fields') || {};\n        if (generic_inline_fields) {\n            generic_inline_fields = JSON.parse(generic_inline_fields.textContent || '{}');\n        }\n\n        this.CMS._plugins.forEach(function (plugin) {\n            if (plugin[1].type === 'plugin' || plugin[1].type === 'generic') {\n                // Either plugin or frontend editable element\n                const url = plugin[1].urls.edit_plugin;\n                const id = plugin[1].plugin_id;\n                let wrapper;\n\n                if (plugin[1].type === 'plugin' && plugin[1].plugin_type === 'TextPlugin') {\n                    // Text plugin\n                    const elements = document.querySelectorAll('.cms-plugin.' + plugin[0]);\n                    wrapper = this._initInlineRichText(elements, url, plugin[0]);\n                    if (wrapper) {\n                        wrapper.dataset.cmsPluginId = id;\n                        wrapper.dataset.cmsType = 'TextPlugin';\n                    }\n                } else if (plugin[1].type === 'generic') {\n                    // Frontend editable element\n                    const edit_fields = new URL(url.replace('&amp;', '&'), 'https://random-base.org')\n                        .searchParams.get('edit_fields');  // Get the edit_fields parameter from the URL\n                    if (edit_fields && edit_fields.indexOf(',') === -1 && edit_fields !== 'changelist') {\n                        // Single field\n                        const generic_class = plugin[0].split('-');\n                        const search_key = `${generic_class[2]}-${generic_class[3]}-${edit_fields}`;\n                        if (generic_inline_fields[search_key]) {\n                            // Inline editable?\n                            wrapper = this._initInlineRichText(document.querySelectorAll(`.${plugin[0]}`), url, plugin[0]);\n                            if (wrapper) {\n                                wrapper.dataset.cmsCsrfToken = this.CMS.config.csrf;\n                                wrapper.dataset.cmsField = edit_fields;\n                                wrapper.dataset.cmsType = (\n                                    generic_inline_fields[search_key] === 'HTMLFormField' ?\n                                        'HTMLField' : generic_inline_fields[search_key]\n                                );\n                                wrapper.dataset.settings = 'cms-cfg-htmlfield-inline';\n                            }\n                        }\n                    }\n                }\n\n                if (wrapper) {\n                    // Catch CMS single click event to highlight the plugin\n                    // Catch CMS double click event if present, since double click is needed by Editor\n                    if (!Array.from(this.observer.root?.children || []).includes(wrapper)) {\n                        // Only add to the observer if not already observed (e.g., if the page only was update partially)\n                        this.observer.observe(wrapper);\n                        if (this.CMS) {\n                            // Remove django CMS core's double click event handler which opens an edit dialog\n                            this.CMS.$(wrapper).off('dblclick.cms.plugin')\n                                .on('dblclick.cms-editor', function (event) {\n                                    event.stopPropagation();\n                                });\n                            wrapper.addEventListener('focusin', () => {\n                                this._highlightTextplugin(id);\n                            }, true);\n                            // Prevent tooltip on hover\n                            this.CMS.$(wrapper).off('pointerover.cms.plugin pointerout.cms.plugin')\n                                .on('pointerover.cms-editor', function (event) {\n                                    window.CMS.API.Tooltip.displayToggle(false, event.target, '', id);\n                                    event.stopPropagation();\n                                });\n                        }\n                    }\n                }\n            }\n        }, this);\n\n        window.addEventListener('beforeunload', (event) =>  {\n            if (document.querySelector('.cms-editor-inline-wrapper[data-changed=\"true\"]')) {\n                event.preventDefault();\n                event.returnValue = true;\n                return 'Do you really want to leave this page?';\n            }\n        });\n    }\n\n    _createRTE(el) {\n        const settings = this.getSettings(el);\n        // Element options overwrite\n        settings.options = Object.assign({},\n            settings.options || {},\n            JSON.parse(el.dataset.options || '{}')\n        );\n\n        // Add event listener to delete data on modal cancel\n        if (settings.revert_on_cancel) {\n            const CMS = this.CMS;\n            const csrf = CMS.config?.csrf || document.querySelector('input[name=\"csrfmiddlewaretoken\"]').value;\n            CMS.API.Helpers.addEventListener(\n                'modal-close.text-plugin.text-plugin-' + settings.plugin_id,\n                function(e, opts) {\n                    if (!settings.revert_on_cancel || !settings.cancel_plugin_url) {\n                        return;\n                    }\n                    CMS.$.ajax({\n                        method: 'POST',\n                        url: settings.cancel_plugin_url,\n                        data: {\n                            token: settings.action_token,\n                            csrfmiddlewaretoken: csrf\n                        },\n                    }).done(function () {\n                        CMS.API.Helpers.removeEventListener(\n                            'modal-close.text-plugin.text-plugin-' + settings.plugin_id\n                        );\n                        opts.instance.close();\n                    }).fail(function (res) {\n                        CMS.API.Messages.open({\n                            message: res.responseText + ' | ' + res.status + ' ' + res.statusText,\n                            delay: 0,\n                            error: true\n                        });\n                    });\n\n                }\n            );\n        }\n        const inModal = !!document.querySelector(\n            '.app-djangocms_text.model-text.change-form #' + el.id\n        );\n        // Get content: json > textarea > innerHTML\n        let content;\n\n        if (el.dataset.json) {\n            content = JSON.parse(el.dataset.json);\n        } else  {\n            content = el.innerHTML;\n        }\n        if (el.tagName === 'TEXTAREA') {\n            el.visible = false;\n            content = el.value;\n            // el = el.insertAdjacentElement('afterend', document.createElement('div'));\n        }\n\n        window.cms_editor_plugin.create(\n            el,\n            inModal,\n            content, settings,\n            el.tagName !== 'TEXTAREA' ? () => this.saveData(el) : () => {\n            }\n        );\n    }\n\n    /**\n     * Retrieves the settings for the given editor.\n     * If the element is a string, it will be treated as an element's ID.\n     * Reads settings from a json script element.\n     *\n     * @param {string|HTMLElement} el - The element or element's ID to retrieve the settings for.\n     *\n     * @return {Object} - The settings object for the element.\n     */\n    getSettings(el) {\n        if (typeof el === \"string\") {\n            if (this._editor_settings[el]) {\n                return this._editor_settings[el];\n            }\n            el = document.getElementById(el);\n        }\n        const settings_el = (\n            document.getElementById(el.dataset.settings) ||\n            document.getElementById('cms-cfg-' + el.dataset.cmsPluginId)\n        );\n        if (settings_el) {\n            this._editor_settings[el.id] = Object.assign(\n                {},\n                this._global_settings,\n                JSON.parse(settings_el.textContent || '{}')\n            );\n        } else {\n            this._editor_settings[el.id] = Object.assign(\n                {},\n                this._global_settings,\n            );\n        }\n        if (!this._editor_settings[el.id].plugin_language) {\n            // If the plugin change form contains a language meta tag, use it\n            const lang = document.querySelector('meta[name=\"plugin_language\"]');\n\n            if (lang && lang.dataset.pluginLanguage) {\n                this._editor_settings[el.id].plugin_language = lang.dataset.pluginLanguage;\n            } else {\n                // If the grouper admin is used, use the language from the grouper admin form\n                const lang = document.querySelector('input[name=\"content__language\"]');\n                if (lang && lang.value) {\n                    this._editor_settings[el.id].plugin_language = lang.value;\n                }\n            }\n        }\n        return this._editor_settings[el.id];\n    }\n\n    /**\n     * Retrieves the list of installed plugins. (Returns empty list of no editor has been initialized.)\n     *\n     * @returns {Array} - The list of installed plugins.\n     */\n    getInstalledPlugins() {\n        if (this._editor_settings) {\n            return this.getSettings(Object.keys(this._editor_settings)[0]).installed_plugins || [];\n        }\n        return [];\n    }\n\n    // CMS Editor: destroy\n    destroyAll() {\n        this.destroyRTE();\n        this.destroyGenericEditor();\n    }\n\n    destroyRTE() {\n        for (const el of Object.keys(this._editor_settings)) {\n            const element = document.getElementById(el);\n            window.cms_editor_plugin.destroyEditor(el);\n        }\n        this._editor_settings = {};\n    }\n\n    // CMS Editor: destroyGenericEditor\n    destroyGenericEditor (el) {\n        if (el in this._generic_editors) {\n            this._generic_editors[el].destroy();\n            delete this._generic_editors[el];\n            this._generic_editors.pop(el);\n        }\n    }\n\n    saveData(el, action) {\n        if (el && el.dataset.changed === \"true\") {\n            const html = window.cms_editor_plugin.getHTML(el),\n                json = window.cms_editor_plugin.getJSON(el);\n\n            let url = el.dataset.cmsEditUrl;\n            let csrf = el.dataset.cmsCsrfToken;\n            let field = el.dataset.cmsField;\n            if (this.CMS) {\n                this.CMS.API.Toolbar.showLoader();\n                url = this.CMS.API.Helpers.updateUrlWithPath(url);\n                csrf = this.CMS.config.csrf;\n            }\n\n            let data = {\n                csrfmiddlewaretoken: csrf,\n                _save: 'Save'\n            };\n            if (field) {\n                // FormField data\n                data[field] = el.dataset.cmsType === 'HTMLField' ? html : el.textContent ;\n            } else {\n                // Plugin data\n                data.body = html;\n                data.json = JSON.stringify(json) || '';\n            }\n\n            fetch(url, {\n                method: 'POST',\n                body: new URLSearchParams(data),\n            })\n                .then(response => {\n                        if (action !== undefined) {\n                            action(el, response);\n                        }\n                        if (this.CMS) {\n                            this.CMS.API.Toolbar.hideLoader();\n                        }\n                        return response.text();\n                }).then(body => {\n                    // If the edited field does not force a reload, read the CMS databridge values from the response,\n                    // either directly or from a script tag or from the response using regex.\n                    // This depends on the exact format django CMS core returns it. This will need to be adjusted\n                    // if the format changes.\n                    // Fallback solution is to reload the page as djagocms-text-ckeditor used to do.\n                    const dom = document.createElement('html');\n                    dom.innerHTML = body;\n                    const success_element = dom.querySelectorAll('div.messagelist > div.success').length > 0;\n                    if (!success_element) {\n                        el.dataset.changed = 'true';\n                        // Collect messages\n                        const domMessages = dom.querySelectorAll(\n                            `.field-${field ? field : 'body'} ul.errorlist > li`\n                        );\n                        let messages = [];\n                        domMessages.forEach((message) => {\n                            messages.push(message.textContent);\n                        });\n                        const domField = dom.querySelectorAll(\n                            `.field-${field ? field : 'body'} label`\n                        );\n                        if (messages.length === 0) {\n                            // Maybe CMS message from error.html?\n                            const errorDescription = dom.querySelector('form fieldset .description');\n                            if (errorDescription) {\n                                messages.push(errorDescription.textContent);\n                            }\n                        }\n                        if (messages.length > 0 && this.CMS) {\n                            this.CMS.API.Toolbar.hideLoader();\n                            this.CMS.API.Messages.open({\n                                message: (domField.length > 0 ? domField[0].textContent : '') + messages.join(', '),\n                                error: true,\n                                delay: -1,\n                            });\n                        }\n                        return;  // No databridge to evaluate\n                    }\n                    if (this.CMS) {\n                        // Success:\n                        // Remove an error message from a previous save attempt\n                        this.CMS.API.Messages.close();\n                        // Show messages if any\n                        const settings = this.getSettings(el);\n                        if (settings.messages_url) {\n                            fetch(settings.messages_url)\n                                .then(response => response.json())\n                                .then(messages => {\n                                    let error = \"success\", message_text = \"\";\n                                    for (let message of messages.messages) {\n                                        if (message.level_tag === \"error\") {\n                                            error = \"error\";\n                                        }\n                                        message_text += `<p>${message.message}</p>`;\n                                    }\n                                    if (message_text.length > 0) {\n                                        this.CMS.API.Messages.open({\n                                            message: message_text,\n                                            error: error === \"error\",\n                                        });\n                                    }\n                                });\n                        }\n\n                    }\n                    el.dataset.changed = 'false';\n                    this.processDataBridge(dom);\n                    if (!this.CMS.API.Helpers.dataBridge) {\n                        // No databridge found\n                        this.CMS.API.Helpers.reloadBrowser('REFRESH_PAGE');\n                        return;\n                    }\n\n                    if (this.CMS.settings.version.startsWith('3.')) {\n                        /* Reflect dirty flag in django CMS < 4 */\n                        try {\n                            /* For some reason, in v3 this fails if the structure board is not open */\n                            this.CMS.API.StructureBoard.handleEditPlugin(this.CMS.API.Helpers.dataBridge);\n                        } catch (e) {\n                            console.error(e);\n                        }\n                        this._loadToolbar();\n                    } else {\n                        this.CMS.API.StructureBoard.handleEditPlugin(this.CMS.API.Helpers.dataBridge);\n                    }\n                })\n                .catch(error => {\n                    el.dataset.changed = 'true';\n                    if (this.CMS) {\n                        this.CMS.API.Toolbar.hideLoader();\n                        this.CMS.API.Messages.open({\n                            message: error.message,\n                            error: true,\n                            delay: -1,\n                        });\n                    }\n                    window.console.error(error.message);\n                    window.console.log(error.stack);\n                });\n        }\n    }\n\n    processDataBridge(dom) {\n        const script = dom.querySelector('script#data-bridge');\n\n        if (script && script.textContent.length > 2) {\n            this.CMS.API.Helpers.dataBridge = JSON.parse(script.textContent);\n        } else {\n            const html = dom.innerHTML;\n            const regex1 = /^\\s*Window\\.CMS\\.API\\.Helpers\\.dataBridge\\s=\\s(.*?);$/gmu.exec(html);\n            const regex2 = /^\\s*Window\\.CMS\\.API\\.Helpers\\.dataBridge\\.structure\\s=\\s(.*?);$/gmu.exec(html);\n\n            if (regex1 && regex2 && this.CMS) {\n                this.CMS.API.Helpers.dataBridge = JSON.parse(regex1[1]);\n                this.CMS.API.Helpers.dataBridge.structure = JSON.parse(regex2[1]);\n            } else {\n                // No databridge found\n                this.CMS.API.Helpers.dataBridge = null;\n            }\n        }\n        // Additional content for the page disrupts inline editing and needs to be removed\n        if (this.CMS.API.Helpers.dataBridge?.structure?.content) {\n            delete this.CMS.API.Helpers.dataBridge.structure.content;\n        }\n    }\n\n    // CMS Editor: addPluginForm\n    // Get form for a new child plugin\n    addPluginForm (plugin_type, iframe, el , onLoad, onSave) {\n        const settings = this.getSettings(el);\n        const data = {\n            placeholder_id: settings.placeholder_id,\n            plugin_type: plugin_type,\n            plugin_parent: settings.plugin_id,\n            plugin_language: settings.plugin_language,\n            plugin_position: settings.plugin_position + 1,\n            cms_path: window.parent.location.pathname,\n            cms_history: 0,\n        };\n        const url = `${settings.add_plugin_url}?${new URLSearchParams(data).toString()}`;\n        return this.loadPluginForm(url, iframe, el, onLoad, onSave);\n    }\n\n    // CMS Editor: addPluginForm\n    // Get form for a new child plugin\n    editPluginForm (plugin_id, iframe, el, onLoad, onSave) {\n        let url = el.dataset.cmsEditUrl || window.location.href;\n        url = url.replace(/\\/edit-plugin\\/\\d+/, '/edit-plugin/' + plugin_id);\n        const data = {\n            '_popup': 1,\n            cms_path: window.parent.location.pathname,\n            cms_history: 0,\n        };\n        url = `${url}?${new URLSearchParams(data).toString()}`;\n        return this.loadPluginForm(url, iframe, el, onLoad, onSave);\n    }\n\n    loadPluginForm (url, iframe, el, onLoad, onSave) {\n        iframe.addEventListener('load', () => {\n            const form = iframe.contentDocument;\n            const heading = form.querySelector('#content h1');\n            const submitrow = form.querySelector('.submit-row');\n\n            // Remove submit button and heading\n            if (submitrow) {\n                submitrow.style.display = 'none';\n            }\n            if (heading) {\n                heading.style.display = 'none';\n            }\n\n            //\n            let saveSuccess = !!form.querySelector('div.messagelist div.success');\n            if (!saveSuccess) {\n                saveSuccess =\n                    !!form.querySelector('.dashboard #content-main') &&\n                    !form.querySelector('.messagelist .error');\n            }\n            if (saveSuccess) {\n                // Mark document and child as changed\n                el.dataset.changed = 'true';\n                // Hook into the django CMS dataBridge to get the details of the newly created or saved\n                // plugin. For new plugins we need their id to get the content.\n\n                this.processDataBridge(form.body);\n                // Needed to update StructureBoard\n                if (onSave && this.CMS.API.Helpers.dataBridge) {\n                    onSave(el, form, this.CMS.API.Helpers.dataBridge);\n                }\n                //  Do callback\n            } else if (onLoad) {\n                onLoad(el, form, heading, submitrow);\n            }\n            // Editor-specific dialog setup goes into the callback\n        });\n        iframe.setAttribute('src', url);\n\n    }\n\n    // CMS Editor: requestPluginMarkup\n    // Get HTML markup for a child plugin\n    requestPluginMarkup (plugin_id, el) {\n        const settings = this.getSettings(el);\n        const data = {\n            plugin: plugin_id,\n            token: settings.action_token,\n        };\n\n        const url = `${settings.render_plugin_url}?${new URLSearchParams(data).toString()}`;\n\n        return fetch(url, {method: 'GET'})\n            .then(response => {\n                if (response.status === 200) {\n                    return response.text();\n                }\n                else if (response.status === 204)\n                {\n                    return null;\n                }\n            });\n     }\n\n    // CMS Editor: resetInlineEditors\n    _resetInlineEditors () {\n        this.initInlineEditors();\n    }\n\n    // CMS Editor: loadToolbar\n    // Load the toolbar after saving for update\n    _loadToolbar () {\n        const $ = this.CMS.$;\n        this.CMS.API.StructureBoard._loadToolbar()\n            .done((newToolbar) => {\n                this.CMS.API.Toolbar._refreshMarkup($(newToolbar).find('.cms-toolbar'));\n            })\n            .fail(() => this.CMS.API.Helpers.reloadBrowser());\n    }\n\n    _highlightTextplugin (pluginId) {\n        const HIGHLIGHT_TIMEOUT = 100;\n\n        if (this.CMS) {\n            const $ = this.CMS.$;\n            const draggable = $('.cms-draggable-' + pluginId);\n            const doc = $(document);\n            const currentExpandmode = doc.data('expandmode');\n\n\n            // expand necessary parents\n            doc.data('expandmode', false);\n            draggable\n                .parents('.cms-draggable')\n                .find('> .cms-dragitem-collapsable:not(\".cms-dragitem-expanded\") > .cms-dragitem-text')\n                .each((i, el) => {\n                    $(el).triggerHandler(this.CMS.Plugin.click);\n                });\n            if (draggable.length > 0) {  // Expanded elements available\n                setTimeout(function () {\n                    doc.data('expandmode', currentExpandmode);\n                });\n                setTimeout( () => {\n                    this.CMS.Plugin._highlightPluginStructure(draggable.find('.cms-dragitem:first'),\n                        {successTimeout: 200, delay: 2000, seeThrough: true});\n                }, HIGHLIGHT_TIMEOUT);\n            }\n        }\n    }\n\n    _initInlineRichText(elements, url, cls) {\n        let wrapper;\n\n        if (elements.length > 0) {\n            if (elements.length === 1 && (\n                elements[0].tagName === 'DIV' || // Single wrapping div\n                elements[0].tagName === 'CMS-PLUGIN' ||  // Single wrapping cms-plugin tag\n                elements[0].classList.contains('cms-editor-inline-wrapper')  // already wrapped\n            )) {\n                // already wrapped?\n                wrapper = elements[0];\n                wrapper.classList.add('cms-editor-inline-wrapper');\n            } else {  // no, wrap now!\n                wrapper = document.createElement('div');\n                wrapper.classList.add('cms-editor-inline-wrapper', 'wrapped');\n                wrapper.classList.add('cms-plugin', cls, 'cms-plugin-start', 'cms-plugin-end');\n                wrapper = this._wrapAll(elements, wrapper, cls);\n            }\n            wrapper.dataset.cmsEditUrl = url;\n            return wrapper;\n        }\n        // No elements found\n        return undefined;\n    }\n\n    // Wrap wrapper around nodes\n    // Just pass a collection of nodes, and a wrapper element\n    _wrapAll (nodes, wrapper, cls) {\n        // Cache the current parent and previous sibling of the first node.\n        const parent = nodes[0].parentNode;\n        const previousSibling = nodes[0].previousSibling;\n\n        // Place each node in wrapper.\n        for (const node of nodes) {\n            // Remove class markers\n            node.classList.remove('cms-plugin', cls, 'cms-plugin-start', 'cms-plugin-end');\n            // ... and add to wrapper\n            wrapper.appendChild(node);\n        }\n\n        // Place the wrapper just after the cached previousSibling,\n        // or if that is null, just before the first child.\n        const nextSibling = previousSibling ? previousSibling.nextSibling : parent.firstChild;\n        parent.insertBefore(wrapper, nextSibling);\n\n        return wrapper;\n    }\n}\n\n\n// Create global editor object\nwindow.CMS_Editor = window.CMS_Editor || new CMSEditor();\n\n"],"names":[],"sourceRoot":""}